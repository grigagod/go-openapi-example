// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateBooking implements create-booking operation.
	//
	// A booking is a temporary hold on a trip. It is not confirmed until the payment is processed.
	//
	// POST /bookings
	CreateBooking(ctx context.Context, req *Booking) (CreateBookingRes, error)
	// CreateBookingPayment implements create-booking-payment operation.
	//
	// A payment is an attempt to pay for the booking, which will confirm the booking for the user and
	// enable them to get their tickets.
	//
	// POST /bookings/{bookingId}/payment
	CreateBookingPayment(ctx context.Context, req *BookingPayment, params CreateBookingPaymentParams) (CreateBookingPaymentRes, error)
	// DeleteBooking implements delete-booking operation.
	//
	// Deletes a booking, cancelling the hold on the trip.
	//
	// DELETE /bookings/{bookingId}
	DeleteBooking(ctx context.Context, params DeleteBookingParams) (DeleteBookingRes, error)
	// GetBooking implements get-booking operation.
	//
	// Returns the details of a specific booking.
	//
	// GET /bookings/{bookingId}
	GetBooking(ctx context.Context, params GetBookingParams) (GetBookingRes, error)
	// GetBookings implements get-bookings operation.
	//
	// Returns a list of all trip bookings by the authenticated user.
	//
	// GET /bookings
	GetBookings(ctx context.Context, params GetBookingsParams) (GetBookingsRes, error)
	// GetStations implements get-stations operation.
	//
	// Returns a paginated and searchable list of all train stations.
	//
	// GET /stations
	GetStations(ctx context.Context, params GetStationsParams) (GetStationsRes, error)
	// GetTrips implements get-trips operation.
	//
	// Returns a list of available train trips between the specified origin and destination stations on
	// the given date, and allows for filtering by bicycle and dog allowances.
	//
	// GET /trips
	GetTrips(ctx context.Context, params GetTripsParams) (GetTripsRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}

// WebhookHandler handles webhooks described by OpenAPI v3 specification.
type WebhookHandler interface {
	// NewBooking implements new-booking operation.
	//
	// Subscribe to new bookings being created, to update integrations for your users.  Related data is
	// available via the links provided in the request.
	//
	NewBooking(ctx context.Context, req *NewBookingReq) error
}

// WebhookServer implements http server based on OpenAPI v3 specification and
// calls WebhookHandler to handle requests.
type WebhookServer struct {
	h WebhookHandler
	baseServer
}

// NewWebhookServer creates new WebhookServer.
func NewWebhookServer(h WebhookHandler, opts ...ServerOption) (*WebhookServer, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &WebhookServer{
		h:          h,
		baseServer: s,
	}, nil
}
