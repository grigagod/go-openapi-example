// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"net/url"
	"time"

	"github.com/go-faster/errors"
	"github.com/google/uuid"
)

// BadRequestHeaders wraps Problem with response headers.
type BadRequestHeaders struct {
	RateLimit OptString
	Response  Problem
}

// GetRateLimit returns the value of RateLimit.
func (s *BadRequestHeaders) GetRateLimit() OptString {
	return s.RateLimit
}

// GetResponse returns the value of Response.
func (s *BadRequestHeaders) GetResponse() Problem {
	return s.Response
}

// SetRateLimit sets the value of RateLimit.
func (s *BadRequestHeaders) SetRateLimit(val OptString) {
	s.RateLimit = val
}

// SetResponse sets the value of Response.
func (s *BadRequestHeaders) SetResponse(val Problem) {
	s.Response = val
}

func (*BadRequestHeaders) createBookingPaymentRes() {}
func (*BadRequestHeaders) createBookingRes()        {}
func (*BadRequestHeaders) deleteBookingRes()        {}
func (*BadRequestHeaders) getBookingRes()           {}
func (*BadRequestHeaders) getBookingsRes()          {}
func (*BadRequestHeaders) getStationsRes()          {}
func (*BadRequestHeaders) getTripsRes()             {}

// Ref: #/components/schemas/Booking
type Booking struct {
	// Unique identifier for the booking.
	ID OptUUID `json:"id"`
	// Identifier of the booked trip.
	TripID OptUUID `json:"trip_id"`
	// Name of the passenger.
	PassengerName OptString `json:"passenger_name"`
	// Indicates whether the passenger has a bicycle.
	HasBicycle OptBool `json:"has_bicycle"`
	// Indicates whether the passenger has a dog.
	HasDog OptBool `json:"has_dog"`
}

// GetID returns the value of ID.
func (s *Booking) GetID() OptUUID {
	return s.ID
}

// GetTripID returns the value of TripID.
func (s *Booking) GetTripID() OptUUID {
	return s.TripID
}

// GetPassengerName returns the value of PassengerName.
func (s *Booking) GetPassengerName() OptString {
	return s.PassengerName
}

// GetHasBicycle returns the value of HasBicycle.
func (s *Booking) GetHasBicycle() OptBool {
	return s.HasBicycle
}

// GetHasDog returns the value of HasDog.
func (s *Booking) GetHasDog() OptBool {
	return s.HasDog
}

// SetID sets the value of ID.
func (s *Booking) SetID(val OptUUID) {
	s.ID = val
}

// SetTripID sets the value of TripID.
func (s *Booking) SetTripID(val OptUUID) {
	s.TripID = val
}

// SetPassengerName sets the value of PassengerName.
func (s *Booking) SetPassengerName(val OptString) {
	s.PassengerName = val
}

// SetHasBicycle sets the value of HasBicycle.
func (s *Booking) SetHasBicycle(val OptBool) {
	s.HasBicycle = val
}

// SetHasDog sets the value of HasDog.
func (s *Booking) SetHasDog(val OptBool) {
	s.HasDog = val
}

// Ref: #/components/schemas/BookingPayment
type BookingPayment struct {
	// Unique identifier for the payment. This will be a unique identifier for the payment, and is used
	// to reference the payment in other objects.
	ID OptUUID `json:"id"`
	// Amount intended to be collected by this payment. A positive decimal figure describing the amount
	// to be collected.
	Amount OptFloat64 `json:"amount"`
	// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
	Currency OptBookingPaymentCurrency `json:"currency"`
	// The payment source to take the payment from. This can be a card or a bank account. Some of these
	// properties will be hidden on read to protect PII leaking.
	Source OptBookingPaymentSource `json:"source"`
	// The status of the payment, one of `pending`, `succeeded`, or `failed`.
	Status OptBookingPaymentStatus `json:"status"`
}

// GetID returns the value of ID.
func (s *BookingPayment) GetID() OptUUID {
	return s.ID
}

// GetAmount returns the value of Amount.
func (s *BookingPayment) GetAmount() OptFloat64 {
	return s.Amount
}

// GetCurrency returns the value of Currency.
func (s *BookingPayment) GetCurrency() OptBookingPaymentCurrency {
	return s.Currency
}

// GetSource returns the value of Source.
func (s *BookingPayment) GetSource() OptBookingPaymentSource {
	return s.Source
}

// GetStatus returns the value of Status.
func (s *BookingPayment) GetStatus() OptBookingPaymentStatus {
	return s.Status
}

// SetID sets the value of ID.
func (s *BookingPayment) SetID(val OptUUID) {
	s.ID = val
}

// SetAmount sets the value of Amount.
func (s *BookingPayment) SetAmount(val OptFloat64) {
	s.Amount = val
}

// SetCurrency sets the value of Currency.
func (s *BookingPayment) SetCurrency(val OptBookingPaymentCurrency) {
	s.Currency = val
}

// SetSource sets the value of Source.
func (s *BookingPayment) SetSource(val OptBookingPaymentSource) {
	s.Source = val
}

// SetStatus sets the value of Status.
func (s *BookingPayment) SetStatus(val OptBookingPaymentStatus) {
	s.Status = val
}

// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
type BookingPaymentCurrency string

const (
	BookingPaymentCurrencyBam BookingPaymentCurrency = "bam"
	BookingPaymentCurrencyBgn BookingPaymentCurrency = "bgn"
	BookingPaymentCurrencyChf BookingPaymentCurrency = "chf"
	BookingPaymentCurrencyEur BookingPaymentCurrency = "eur"
	BookingPaymentCurrencyGbp BookingPaymentCurrency = "gbp"
	BookingPaymentCurrencyNok BookingPaymentCurrency = "nok"
	BookingPaymentCurrencySek BookingPaymentCurrency = "sek"
	BookingPaymentCurrencyTry BookingPaymentCurrency = "try"
)

// AllValues returns all BookingPaymentCurrency values.
func (BookingPaymentCurrency) AllValues() []BookingPaymentCurrency {
	return []BookingPaymentCurrency{
		BookingPaymentCurrencyBam,
		BookingPaymentCurrencyBgn,
		BookingPaymentCurrencyChf,
		BookingPaymentCurrencyEur,
		BookingPaymentCurrencyGbp,
		BookingPaymentCurrencyNok,
		BookingPaymentCurrencySek,
		BookingPaymentCurrencyTry,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BookingPaymentCurrency) MarshalText() ([]byte, error) {
	switch s {
	case BookingPaymentCurrencyBam:
		return []byte(s), nil
	case BookingPaymentCurrencyBgn:
		return []byte(s), nil
	case BookingPaymentCurrencyChf:
		return []byte(s), nil
	case BookingPaymentCurrencyEur:
		return []byte(s), nil
	case BookingPaymentCurrencyGbp:
		return []byte(s), nil
	case BookingPaymentCurrencyNok:
		return []byte(s), nil
	case BookingPaymentCurrencySek:
		return []byte(s), nil
	case BookingPaymentCurrencyTry:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BookingPaymentCurrency) UnmarshalText(data []byte) error {
	switch BookingPaymentCurrency(data) {
	case BookingPaymentCurrencyBam:
		*s = BookingPaymentCurrencyBam
		return nil
	case BookingPaymentCurrencyBgn:
		*s = BookingPaymentCurrencyBgn
		return nil
	case BookingPaymentCurrencyChf:
		*s = BookingPaymentCurrencyChf
		return nil
	case BookingPaymentCurrencyEur:
		*s = BookingPaymentCurrencyEur
		return nil
	case BookingPaymentCurrencyGbp:
		*s = BookingPaymentCurrencyGbp
		return nil
	case BookingPaymentCurrencyNok:
		*s = BookingPaymentCurrencyNok
		return nil
	case BookingPaymentCurrencySek:
		*s = BookingPaymentCurrencySek
		return nil
	case BookingPaymentCurrencyTry:
		*s = BookingPaymentCurrencyTry
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The payment source to take the payment from. This can be a card or a bank account. Some of these
// properties will be hidden on read to protect PII leaking.
// BookingPaymentSource represents sum type.
type BookingPaymentSource struct {
	Type                  BookingPaymentSourceType // switch on this field
	BookingPaymentSource0 BookingPaymentSource0
	BookingPaymentSource1 BookingPaymentSource1
}

// BookingPaymentSourceType is oneOf type of BookingPaymentSource.
type BookingPaymentSourceType string

// Possible values for BookingPaymentSourceType.
const (
	BookingPaymentSource0BookingPaymentSource BookingPaymentSourceType = "BookingPaymentSource0"
	BookingPaymentSource1BookingPaymentSource BookingPaymentSourceType = "BookingPaymentSource1"
)

// IsBookingPaymentSource0 reports whether BookingPaymentSource is BookingPaymentSource0.
func (s BookingPaymentSource) IsBookingPaymentSource0() bool {
	return s.Type == BookingPaymentSource0BookingPaymentSource
}

// IsBookingPaymentSource1 reports whether BookingPaymentSource is BookingPaymentSource1.
func (s BookingPaymentSource) IsBookingPaymentSource1() bool {
	return s.Type == BookingPaymentSource1BookingPaymentSource
}

// SetBookingPaymentSource0 sets BookingPaymentSource to BookingPaymentSource0.
func (s *BookingPaymentSource) SetBookingPaymentSource0(v BookingPaymentSource0) {
	s.Type = BookingPaymentSource0BookingPaymentSource
	s.BookingPaymentSource0 = v
}

// GetBookingPaymentSource0 returns BookingPaymentSource0 and true boolean if BookingPaymentSource is BookingPaymentSource0.
func (s BookingPaymentSource) GetBookingPaymentSource0() (v BookingPaymentSource0, ok bool) {
	if !s.IsBookingPaymentSource0() {
		return v, false
	}
	return s.BookingPaymentSource0, true
}

// NewBookingPaymentSource0BookingPaymentSource returns new BookingPaymentSource from BookingPaymentSource0.
func NewBookingPaymentSource0BookingPaymentSource(v BookingPaymentSource0) BookingPaymentSource {
	var s BookingPaymentSource
	s.SetBookingPaymentSource0(v)
	return s
}

// SetBookingPaymentSource1 sets BookingPaymentSource to BookingPaymentSource1.
func (s *BookingPaymentSource) SetBookingPaymentSource1(v BookingPaymentSource1) {
	s.Type = BookingPaymentSource1BookingPaymentSource
	s.BookingPaymentSource1 = v
}

// GetBookingPaymentSource1 returns BookingPaymentSource1 and true boolean if BookingPaymentSource is BookingPaymentSource1.
func (s BookingPaymentSource) GetBookingPaymentSource1() (v BookingPaymentSource1, ok bool) {
	if !s.IsBookingPaymentSource1() {
		return v, false
	}
	return s.BookingPaymentSource1, true
}

// NewBookingPaymentSource1BookingPaymentSource returns new BookingPaymentSource from BookingPaymentSource1.
func NewBookingPaymentSource1BookingPaymentSource(v BookingPaymentSource1) BookingPaymentSource {
	var s BookingPaymentSource
	s.SetBookingPaymentSource1(v)
	return s
}

// A card (debit or credit) to take payment from.
type BookingPaymentSource0 struct {
	Object OptString `json:"object"`
	// Cardholder's full name as it appears on the card.
	Name string `json:"name"`
	// The card number, as a string without any separators. On read all but the last four digits will be
	// masked for security.
	Number string `json:"number"`
	// Card security code, 3 or 4 digits usually found on the back of the card.
	Cvc string `json:"cvc"`
	// Two-digit number representing the card's expiration month.
	ExpMonth int64 `json:"exp_month"`
	// Four-digit number representing the card's expiration year.
	ExpYear         int64     `json:"exp_year"`
	AddressLine1    OptString `json:"address_line1"`
	AddressLine2    OptString `json:"address_line2"`
	AddressCity     OptString `json:"address_city"`
	AddressCountry  string    `json:"address_country"`
	AddressPostCode OptString `json:"address_post_code"`
}

// GetObject returns the value of Object.
func (s *BookingPaymentSource0) GetObject() OptString {
	return s.Object
}

// GetName returns the value of Name.
func (s *BookingPaymentSource0) GetName() string {
	return s.Name
}

// GetNumber returns the value of Number.
func (s *BookingPaymentSource0) GetNumber() string {
	return s.Number
}

// GetCvc returns the value of Cvc.
func (s *BookingPaymentSource0) GetCvc() string {
	return s.Cvc
}

// GetExpMonth returns the value of ExpMonth.
func (s *BookingPaymentSource0) GetExpMonth() int64 {
	return s.ExpMonth
}

// GetExpYear returns the value of ExpYear.
func (s *BookingPaymentSource0) GetExpYear() int64 {
	return s.ExpYear
}

// GetAddressLine1 returns the value of AddressLine1.
func (s *BookingPaymentSource0) GetAddressLine1() OptString {
	return s.AddressLine1
}

// GetAddressLine2 returns the value of AddressLine2.
func (s *BookingPaymentSource0) GetAddressLine2() OptString {
	return s.AddressLine2
}

// GetAddressCity returns the value of AddressCity.
func (s *BookingPaymentSource0) GetAddressCity() OptString {
	return s.AddressCity
}

// GetAddressCountry returns the value of AddressCountry.
func (s *BookingPaymentSource0) GetAddressCountry() string {
	return s.AddressCountry
}

// GetAddressPostCode returns the value of AddressPostCode.
func (s *BookingPaymentSource0) GetAddressPostCode() OptString {
	return s.AddressPostCode
}

// SetObject sets the value of Object.
func (s *BookingPaymentSource0) SetObject(val OptString) {
	s.Object = val
}

// SetName sets the value of Name.
func (s *BookingPaymentSource0) SetName(val string) {
	s.Name = val
}

// SetNumber sets the value of Number.
func (s *BookingPaymentSource0) SetNumber(val string) {
	s.Number = val
}

// SetCvc sets the value of Cvc.
func (s *BookingPaymentSource0) SetCvc(val string) {
	s.Cvc = val
}

// SetExpMonth sets the value of ExpMonth.
func (s *BookingPaymentSource0) SetExpMonth(val int64) {
	s.ExpMonth = val
}

// SetExpYear sets the value of ExpYear.
func (s *BookingPaymentSource0) SetExpYear(val int64) {
	s.ExpYear = val
}

// SetAddressLine1 sets the value of AddressLine1.
func (s *BookingPaymentSource0) SetAddressLine1(val OptString) {
	s.AddressLine1 = val
}

// SetAddressLine2 sets the value of AddressLine2.
func (s *BookingPaymentSource0) SetAddressLine2(val OptString) {
	s.AddressLine2 = val
}

// SetAddressCity sets the value of AddressCity.
func (s *BookingPaymentSource0) SetAddressCity(val OptString) {
	s.AddressCity = val
}

// SetAddressCountry sets the value of AddressCountry.
func (s *BookingPaymentSource0) SetAddressCountry(val string) {
	s.AddressCountry = val
}

// SetAddressPostCode sets the value of AddressPostCode.
func (s *BookingPaymentSource0) SetAddressPostCode(val OptString) {
	s.AddressPostCode = val
}

// A bank account to take payment from. Must be able to make payments in the currency specified in
// the payment.
type BookingPaymentSource1 struct {
	Object OptString `json:"object"`
	Name   string    `json:"name"`
	// The account number for the bank account, in string form. Must be a current account.
	Number string `json:"number"`
	// The sort code for the bank account, in string form. Must be a six-digit number.
	SortCode OptString `json:"sort_code"`
	// The type of entity that holds the account. This can be either `individual` or `company`.
	AccountType BookingPaymentSource1AccountType `json:"account_type"`
	// The name of the bank associated with the routing number.
	BankName string `json:"bank_name"`
	// Two-letter country code (ISO 3166-1 alpha-2).
	Country string `json:"country"`
}

// GetObject returns the value of Object.
func (s *BookingPaymentSource1) GetObject() OptString {
	return s.Object
}

// GetName returns the value of Name.
func (s *BookingPaymentSource1) GetName() string {
	return s.Name
}

// GetNumber returns the value of Number.
func (s *BookingPaymentSource1) GetNumber() string {
	return s.Number
}

// GetSortCode returns the value of SortCode.
func (s *BookingPaymentSource1) GetSortCode() OptString {
	return s.SortCode
}

// GetAccountType returns the value of AccountType.
func (s *BookingPaymentSource1) GetAccountType() BookingPaymentSource1AccountType {
	return s.AccountType
}

// GetBankName returns the value of BankName.
func (s *BookingPaymentSource1) GetBankName() string {
	return s.BankName
}

// GetCountry returns the value of Country.
func (s *BookingPaymentSource1) GetCountry() string {
	return s.Country
}

// SetObject sets the value of Object.
func (s *BookingPaymentSource1) SetObject(val OptString) {
	s.Object = val
}

// SetName sets the value of Name.
func (s *BookingPaymentSource1) SetName(val string) {
	s.Name = val
}

// SetNumber sets the value of Number.
func (s *BookingPaymentSource1) SetNumber(val string) {
	s.Number = val
}

// SetSortCode sets the value of SortCode.
func (s *BookingPaymentSource1) SetSortCode(val OptString) {
	s.SortCode = val
}

// SetAccountType sets the value of AccountType.
func (s *BookingPaymentSource1) SetAccountType(val BookingPaymentSource1AccountType) {
	s.AccountType = val
}

// SetBankName sets the value of BankName.
func (s *BookingPaymentSource1) SetBankName(val string) {
	s.BankName = val
}

// SetCountry sets the value of Country.
func (s *BookingPaymentSource1) SetCountry(val string) {
	s.Country = val
}

// The type of entity that holds the account. This can be either `individual` or `company`.
type BookingPaymentSource1AccountType string

const (
	BookingPaymentSource1AccountTypeIndividual BookingPaymentSource1AccountType = "individual"
	BookingPaymentSource1AccountTypeCompany    BookingPaymentSource1AccountType = "company"
)

// AllValues returns all BookingPaymentSource1AccountType values.
func (BookingPaymentSource1AccountType) AllValues() []BookingPaymentSource1AccountType {
	return []BookingPaymentSource1AccountType{
		BookingPaymentSource1AccountTypeIndividual,
		BookingPaymentSource1AccountTypeCompany,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BookingPaymentSource1AccountType) MarshalText() ([]byte, error) {
	switch s {
	case BookingPaymentSource1AccountTypeIndividual:
		return []byte(s), nil
	case BookingPaymentSource1AccountTypeCompany:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BookingPaymentSource1AccountType) UnmarshalText(data []byte) error {
	switch BookingPaymentSource1AccountType(data) {
	case BookingPaymentSource1AccountTypeIndividual:
		*s = BookingPaymentSource1AccountTypeIndividual
		return nil
	case BookingPaymentSource1AccountTypeCompany:
		*s = BookingPaymentSource1AccountTypeCompany
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The status of the payment, one of `pending`, `succeeded`, or `failed`.
type BookingPaymentStatus string

const (
	BookingPaymentStatusPending   BookingPaymentStatus = "pending"
	BookingPaymentStatusSucceeded BookingPaymentStatus = "succeeded"
	BookingPaymentStatusFailed    BookingPaymentStatus = "failed"
)

// AllValues returns all BookingPaymentStatus values.
func (BookingPaymentStatus) AllValues() []BookingPaymentStatus {
	return []BookingPaymentStatus{
		BookingPaymentStatusPending,
		BookingPaymentStatusSucceeded,
		BookingPaymentStatusFailed,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BookingPaymentStatus) MarshalText() ([]byte, error) {
	switch s {
	case BookingPaymentStatusPending:
		return []byte(s), nil
	case BookingPaymentStatusSucceeded:
		return []byte(s), nil
	case BookingPaymentStatusFailed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BookingPaymentStatus) UnmarshalText(data []byte) error {
	switch BookingPaymentStatus(data) {
	case BookingPaymentStatusPending:
		*s = BookingPaymentStatusPending
		return nil
	case BookingPaymentStatusSucceeded:
		*s = BookingPaymentStatusSucceeded
		return nil
	case BookingPaymentStatusFailed:
		*s = BookingPaymentStatusFailed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ConflictHeaders wraps Problem with response headers.
type ConflictHeaders struct {
	RateLimit OptString
	Response  Problem
}

// GetRateLimit returns the value of RateLimit.
func (s *ConflictHeaders) GetRateLimit() OptString {
	return s.RateLimit
}

// GetResponse returns the value of Response.
func (s *ConflictHeaders) GetResponse() Problem {
	return s.Response
}

// SetRateLimit sets the value of RateLimit.
func (s *ConflictHeaders) SetRateLimit(val OptString) {
	s.RateLimit = val
}

// SetResponse sets the value of Response.
func (s *ConflictHeaders) SetResponse(val Problem) {
	s.Response = val
}

func (*ConflictHeaders) createBookingRes() {}

// Merged schema.
type CreateBookingCreated struct {
	// Unique identifier for the booking.
	ID OptUUID `json:"id"`
	// Identifier of the booked trip.
	TripID OptUUID `json:"trip_id"`
	// Name of the passenger.
	PassengerName OptString `json:"passenger_name"`
	// Indicates whether the passenger has a bicycle.
	HasBicycle OptBool `json:"has_bicycle"`
	// Indicates whether the passenger has a dog.
	HasDog OptBool      `json:"has_dog"`
	Links  OptLinksSelf `json:"links"`
}

// GetID returns the value of ID.
func (s *CreateBookingCreated) GetID() OptUUID {
	return s.ID
}

// GetTripID returns the value of TripID.
func (s *CreateBookingCreated) GetTripID() OptUUID {
	return s.TripID
}

// GetPassengerName returns the value of PassengerName.
func (s *CreateBookingCreated) GetPassengerName() OptString {
	return s.PassengerName
}

// GetHasBicycle returns the value of HasBicycle.
func (s *CreateBookingCreated) GetHasBicycle() OptBool {
	return s.HasBicycle
}

// GetHasDog returns the value of HasDog.
func (s *CreateBookingCreated) GetHasDog() OptBool {
	return s.HasDog
}

// GetLinks returns the value of Links.
func (s *CreateBookingCreated) GetLinks() OptLinksSelf {
	return s.Links
}

// SetID sets the value of ID.
func (s *CreateBookingCreated) SetID(val OptUUID) {
	s.ID = val
}

// SetTripID sets the value of TripID.
func (s *CreateBookingCreated) SetTripID(val OptUUID) {
	s.TripID = val
}

// SetPassengerName sets the value of PassengerName.
func (s *CreateBookingCreated) SetPassengerName(val OptString) {
	s.PassengerName = val
}

// SetHasBicycle sets the value of HasBicycle.
func (s *CreateBookingCreated) SetHasBicycle(val OptBool) {
	s.HasBicycle = val
}

// SetHasDog sets the value of HasDog.
func (s *CreateBookingCreated) SetHasDog(val OptBool) {
	s.HasDog = val
}

// SetLinks sets the value of Links.
func (s *CreateBookingCreated) SetLinks(val OptLinksSelf) {
	s.Links = val
}

func (*CreateBookingCreated) createBookingRes() {}

// Merged schema.
type CreateBookingPaymentOK struct {
	// Unique identifier for the payment. This will be a unique identifier for the payment, and is used
	// to reference the payment in other objects.
	ID OptUUID `json:"id"`
	// Amount intended to be collected by this payment. A positive decimal figure describing the amount
	// to be collected.
	Amount OptFloat64 `json:"amount"`
	// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
	Currency OptCreateBookingPaymentOKCurrency `json:"currency"`
	// The payment source to take the payment from. This can be a card or a bank account. Some of these
	// properties will be hidden on read to protect PII leaking.
	Source OptCreateBookingPaymentOKSource `json:"source"`
	// The status of the payment, one of `pending`, `succeeded`, or `failed`.
	Status OptCreateBookingPaymentOKStatus `json:"status"`
	Links  OptLinksBooking                 `json:"links"`
}

// GetID returns the value of ID.
func (s *CreateBookingPaymentOK) GetID() OptUUID {
	return s.ID
}

// GetAmount returns the value of Amount.
func (s *CreateBookingPaymentOK) GetAmount() OptFloat64 {
	return s.Amount
}

// GetCurrency returns the value of Currency.
func (s *CreateBookingPaymentOK) GetCurrency() OptCreateBookingPaymentOKCurrency {
	return s.Currency
}

// GetSource returns the value of Source.
func (s *CreateBookingPaymentOK) GetSource() OptCreateBookingPaymentOKSource {
	return s.Source
}

// GetStatus returns the value of Status.
func (s *CreateBookingPaymentOK) GetStatus() OptCreateBookingPaymentOKStatus {
	return s.Status
}

// GetLinks returns the value of Links.
func (s *CreateBookingPaymentOK) GetLinks() OptLinksBooking {
	return s.Links
}

// SetID sets the value of ID.
func (s *CreateBookingPaymentOK) SetID(val OptUUID) {
	s.ID = val
}

// SetAmount sets the value of Amount.
func (s *CreateBookingPaymentOK) SetAmount(val OptFloat64) {
	s.Amount = val
}

// SetCurrency sets the value of Currency.
func (s *CreateBookingPaymentOK) SetCurrency(val OptCreateBookingPaymentOKCurrency) {
	s.Currency = val
}

// SetSource sets the value of Source.
func (s *CreateBookingPaymentOK) SetSource(val OptCreateBookingPaymentOKSource) {
	s.Source = val
}

// SetStatus sets the value of Status.
func (s *CreateBookingPaymentOK) SetStatus(val OptCreateBookingPaymentOKStatus) {
	s.Status = val
}

// SetLinks sets the value of Links.
func (s *CreateBookingPaymentOK) SetLinks(val OptLinksBooking) {
	s.Links = val
}

// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
type CreateBookingPaymentOKCurrency string

const (
	CreateBookingPaymentOKCurrencyBam CreateBookingPaymentOKCurrency = "bam"
	CreateBookingPaymentOKCurrencyBgn CreateBookingPaymentOKCurrency = "bgn"
	CreateBookingPaymentOKCurrencyChf CreateBookingPaymentOKCurrency = "chf"
	CreateBookingPaymentOKCurrencyEur CreateBookingPaymentOKCurrency = "eur"
	CreateBookingPaymentOKCurrencyGbp CreateBookingPaymentOKCurrency = "gbp"
	CreateBookingPaymentOKCurrencyNok CreateBookingPaymentOKCurrency = "nok"
	CreateBookingPaymentOKCurrencySek CreateBookingPaymentOKCurrency = "sek"
	CreateBookingPaymentOKCurrencyTry CreateBookingPaymentOKCurrency = "try"
)

// AllValues returns all CreateBookingPaymentOKCurrency values.
func (CreateBookingPaymentOKCurrency) AllValues() []CreateBookingPaymentOKCurrency {
	return []CreateBookingPaymentOKCurrency{
		CreateBookingPaymentOKCurrencyBam,
		CreateBookingPaymentOKCurrencyBgn,
		CreateBookingPaymentOKCurrencyChf,
		CreateBookingPaymentOKCurrencyEur,
		CreateBookingPaymentOKCurrencyGbp,
		CreateBookingPaymentOKCurrencyNok,
		CreateBookingPaymentOKCurrencySek,
		CreateBookingPaymentOKCurrencyTry,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateBookingPaymentOKCurrency) MarshalText() ([]byte, error) {
	switch s {
	case CreateBookingPaymentOKCurrencyBam:
		return []byte(s), nil
	case CreateBookingPaymentOKCurrencyBgn:
		return []byte(s), nil
	case CreateBookingPaymentOKCurrencyChf:
		return []byte(s), nil
	case CreateBookingPaymentOKCurrencyEur:
		return []byte(s), nil
	case CreateBookingPaymentOKCurrencyGbp:
		return []byte(s), nil
	case CreateBookingPaymentOKCurrencyNok:
		return []byte(s), nil
	case CreateBookingPaymentOKCurrencySek:
		return []byte(s), nil
	case CreateBookingPaymentOKCurrencyTry:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateBookingPaymentOKCurrency) UnmarshalText(data []byte) error {
	switch CreateBookingPaymentOKCurrency(data) {
	case CreateBookingPaymentOKCurrencyBam:
		*s = CreateBookingPaymentOKCurrencyBam
		return nil
	case CreateBookingPaymentOKCurrencyBgn:
		*s = CreateBookingPaymentOKCurrencyBgn
		return nil
	case CreateBookingPaymentOKCurrencyChf:
		*s = CreateBookingPaymentOKCurrencyChf
		return nil
	case CreateBookingPaymentOKCurrencyEur:
		*s = CreateBookingPaymentOKCurrencyEur
		return nil
	case CreateBookingPaymentOKCurrencyGbp:
		*s = CreateBookingPaymentOKCurrencyGbp
		return nil
	case CreateBookingPaymentOKCurrencyNok:
		*s = CreateBookingPaymentOKCurrencyNok
		return nil
	case CreateBookingPaymentOKCurrencySek:
		*s = CreateBookingPaymentOKCurrencySek
		return nil
	case CreateBookingPaymentOKCurrencyTry:
		*s = CreateBookingPaymentOKCurrencyTry
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// CreateBookingPaymentOKHeaders wraps CreateBookingPaymentOK with response headers.
type CreateBookingPaymentOKHeaders struct {
	CacheControl OptString
	RateLimit    OptString
	Response     CreateBookingPaymentOK
}

// GetCacheControl returns the value of CacheControl.
func (s *CreateBookingPaymentOKHeaders) GetCacheControl() OptString {
	return s.CacheControl
}

// GetRateLimit returns the value of RateLimit.
func (s *CreateBookingPaymentOKHeaders) GetRateLimit() OptString {
	return s.RateLimit
}

// GetResponse returns the value of Response.
func (s *CreateBookingPaymentOKHeaders) GetResponse() CreateBookingPaymentOK {
	return s.Response
}

// SetCacheControl sets the value of CacheControl.
func (s *CreateBookingPaymentOKHeaders) SetCacheControl(val OptString) {
	s.CacheControl = val
}

// SetRateLimit sets the value of RateLimit.
func (s *CreateBookingPaymentOKHeaders) SetRateLimit(val OptString) {
	s.RateLimit = val
}

// SetResponse sets the value of Response.
func (s *CreateBookingPaymentOKHeaders) SetResponse(val CreateBookingPaymentOK) {
	s.Response = val
}

func (*CreateBookingPaymentOKHeaders) createBookingPaymentRes() {}

// The payment source to take the payment from. This can be a card or a bank account. Some of these
// properties will be hidden on read to protect PII leaking.
// CreateBookingPaymentOKSource represents sum type.
type CreateBookingPaymentOKSource struct {
	Type                          CreateBookingPaymentOKSourceType // switch on this field
	CreateBookingPaymentOKSource0 CreateBookingPaymentOKSource0
	CreateBookingPaymentOKSource1 CreateBookingPaymentOKSource1
}

// CreateBookingPaymentOKSourceType is oneOf type of CreateBookingPaymentOKSource.
type CreateBookingPaymentOKSourceType string

// Possible values for CreateBookingPaymentOKSourceType.
const (
	CreateBookingPaymentOKSource0CreateBookingPaymentOKSource CreateBookingPaymentOKSourceType = "CreateBookingPaymentOKSource0"
	CreateBookingPaymentOKSource1CreateBookingPaymentOKSource CreateBookingPaymentOKSourceType = "CreateBookingPaymentOKSource1"
)

// IsCreateBookingPaymentOKSource0 reports whether CreateBookingPaymentOKSource is CreateBookingPaymentOKSource0.
func (s CreateBookingPaymentOKSource) IsCreateBookingPaymentOKSource0() bool {
	return s.Type == CreateBookingPaymentOKSource0CreateBookingPaymentOKSource
}

// IsCreateBookingPaymentOKSource1 reports whether CreateBookingPaymentOKSource is CreateBookingPaymentOKSource1.
func (s CreateBookingPaymentOKSource) IsCreateBookingPaymentOKSource1() bool {
	return s.Type == CreateBookingPaymentOKSource1CreateBookingPaymentOKSource
}

// SetCreateBookingPaymentOKSource0 sets CreateBookingPaymentOKSource to CreateBookingPaymentOKSource0.
func (s *CreateBookingPaymentOKSource) SetCreateBookingPaymentOKSource0(v CreateBookingPaymentOKSource0) {
	s.Type = CreateBookingPaymentOKSource0CreateBookingPaymentOKSource
	s.CreateBookingPaymentOKSource0 = v
}

// GetCreateBookingPaymentOKSource0 returns CreateBookingPaymentOKSource0 and true boolean if CreateBookingPaymentOKSource is CreateBookingPaymentOKSource0.
func (s CreateBookingPaymentOKSource) GetCreateBookingPaymentOKSource0() (v CreateBookingPaymentOKSource0, ok bool) {
	if !s.IsCreateBookingPaymentOKSource0() {
		return v, false
	}
	return s.CreateBookingPaymentOKSource0, true
}

// NewCreateBookingPaymentOKSource0CreateBookingPaymentOKSource returns new CreateBookingPaymentOKSource from CreateBookingPaymentOKSource0.
func NewCreateBookingPaymentOKSource0CreateBookingPaymentOKSource(v CreateBookingPaymentOKSource0) CreateBookingPaymentOKSource {
	var s CreateBookingPaymentOKSource
	s.SetCreateBookingPaymentOKSource0(v)
	return s
}

// SetCreateBookingPaymentOKSource1 sets CreateBookingPaymentOKSource to CreateBookingPaymentOKSource1.
func (s *CreateBookingPaymentOKSource) SetCreateBookingPaymentOKSource1(v CreateBookingPaymentOKSource1) {
	s.Type = CreateBookingPaymentOKSource1CreateBookingPaymentOKSource
	s.CreateBookingPaymentOKSource1 = v
}

// GetCreateBookingPaymentOKSource1 returns CreateBookingPaymentOKSource1 and true boolean if CreateBookingPaymentOKSource is CreateBookingPaymentOKSource1.
func (s CreateBookingPaymentOKSource) GetCreateBookingPaymentOKSource1() (v CreateBookingPaymentOKSource1, ok bool) {
	if !s.IsCreateBookingPaymentOKSource1() {
		return v, false
	}
	return s.CreateBookingPaymentOKSource1, true
}

// NewCreateBookingPaymentOKSource1CreateBookingPaymentOKSource returns new CreateBookingPaymentOKSource from CreateBookingPaymentOKSource1.
func NewCreateBookingPaymentOKSource1CreateBookingPaymentOKSource(v CreateBookingPaymentOKSource1) CreateBookingPaymentOKSource {
	var s CreateBookingPaymentOKSource
	s.SetCreateBookingPaymentOKSource1(v)
	return s
}

// A card (debit or credit) to take payment from.
type CreateBookingPaymentOKSource0 struct {
	Object OptString `json:"object"`
	// Cardholder's full name as it appears on the card.
	Name string `json:"name"`
	// The card number, as a string without any separators. On read all but the last four digits will be
	// masked for security.
	Number string `json:"number"`
	// Card security code, 3 or 4 digits usually found on the back of the card.
	Cvc string `json:"cvc"`
	// Two-digit number representing the card's expiration month.
	ExpMonth int64 `json:"exp_month"`
	// Four-digit number representing the card's expiration year.
	ExpYear         int64     `json:"exp_year"`
	AddressLine1    OptString `json:"address_line1"`
	AddressLine2    OptString `json:"address_line2"`
	AddressCity     OptString `json:"address_city"`
	AddressCountry  string    `json:"address_country"`
	AddressPostCode OptString `json:"address_post_code"`
}

// GetObject returns the value of Object.
func (s *CreateBookingPaymentOKSource0) GetObject() OptString {
	return s.Object
}

// GetName returns the value of Name.
func (s *CreateBookingPaymentOKSource0) GetName() string {
	return s.Name
}

// GetNumber returns the value of Number.
func (s *CreateBookingPaymentOKSource0) GetNumber() string {
	return s.Number
}

// GetCvc returns the value of Cvc.
func (s *CreateBookingPaymentOKSource0) GetCvc() string {
	return s.Cvc
}

// GetExpMonth returns the value of ExpMonth.
func (s *CreateBookingPaymentOKSource0) GetExpMonth() int64 {
	return s.ExpMonth
}

// GetExpYear returns the value of ExpYear.
func (s *CreateBookingPaymentOKSource0) GetExpYear() int64 {
	return s.ExpYear
}

// GetAddressLine1 returns the value of AddressLine1.
func (s *CreateBookingPaymentOKSource0) GetAddressLine1() OptString {
	return s.AddressLine1
}

// GetAddressLine2 returns the value of AddressLine2.
func (s *CreateBookingPaymentOKSource0) GetAddressLine2() OptString {
	return s.AddressLine2
}

// GetAddressCity returns the value of AddressCity.
func (s *CreateBookingPaymentOKSource0) GetAddressCity() OptString {
	return s.AddressCity
}

// GetAddressCountry returns the value of AddressCountry.
func (s *CreateBookingPaymentOKSource0) GetAddressCountry() string {
	return s.AddressCountry
}

// GetAddressPostCode returns the value of AddressPostCode.
func (s *CreateBookingPaymentOKSource0) GetAddressPostCode() OptString {
	return s.AddressPostCode
}

// SetObject sets the value of Object.
func (s *CreateBookingPaymentOKSource0) SetObject(val OptString) {
	s.Object = val
}

// SetName sets the value of Name.
func (s *CreateBookingPaymentOKSource0) SetName(val string) {
	s.Name = val
}

// SetNumber sets the value of Number.
func (s *CreateBookingPaymentOKSource0) SetNumber(val string) {
	s.Number = val
}

// SetCvc sets the value of Cvc.
func (s *CreateBookingPaymentOKSource0) SetCvc(val string) {
	s.Cvc = val
}

// SetExpMonth sets the value of ExpMonth.
func (s *CreateBookingPaymentOKSource0) SetExpMonth(val int64) {
	s.ExpMonth = val
}

// SetExpYear sets the value of ExpYear.
func (s *CreateBookingPaymentOKSource0) SetExpYear(val int64) {
	s.ExpYear = val
}

// SetAddressLine1 sets the value of AddressLine1.
func (s *CreateBookingPaymentOKSource0) SetAddressLine1(val OptString) {
	s.AddressLine1 = val
}

// SetAddressLine2 sets the value of AddressLine2.
func (s *CreateBookingPaymentOKSource0) SetAddressLine2(val OptString) {
	s.AddressLine2 = val
}

// SetAddressCity sets the value of AddressCity.
func (s *CreateBookingPaymentOKSource0) SetAddressCity(val OptString) {
	s.AddressCity = val
}

// SetAddressCountry sets the value of AddressCountry.
func (s *CreateBookingPaymentOKSource0) SetAddressCountry(val string) {
	s.AddressCountry = val
}

// SetAddressPostCode sets the value of AddressPostCode.
func (s *CreateBookingPaymentOKSource0) SetAddressPostCode(val OptString) {
	s.AddressPostCode = val
}

// A bank account to take payment from. Must be able to make payments in the currency specified in
// the payment.
type CreateBookingPaymentOKSource1 struct {
	Object OptString `json:"object"`
	Name   string    `json:"name"`
	// The account number for the bank account, in string form. Must be a current account.
	Number string `json:"number"`
	// The sort code for the bank account, in string form. Must be a six-digit number.
	SortCode OptString `json:"sort_code"`
	// The type of entity that holds the account. This can be either `individual` or `company`.
	AccountType CreateBookingPaymentOKSource1AccountType `json:"account_type"`
	// The name of the bank associated with the routing number.
	BankName string `json:"bank_name"`
	// Two-letter country code (ISO 3166-1 alpha-2).
	Country string `json:"country"`
}

// GetObject returns the value of Object.
func (s *CreateBookingPaymentOKSource1) GetObject() OptString {
	return s.Object
}

// GetName returns the value of Name.
func (s *CreateBookingPaymentOKSource1) GetName() string {
	return s.Name
}

// GetNumber returns the value of Number.
func (s *CreateBookingPaymentOKSource1) GetNumber() string {
	return s.Number
}

// GetSortCode returns the value of SortCode.
func (s *CreateBookingPaymentOKSource1) GetSortCode() OptString {
	return s.SortCode
}

// GetAccountType returns the value of AccountType.
func (s *CreateBookingPaymentOKSource1) GetAccountType() CreateBookingPaymentOKSource1AccountType {
	return s.AccountType
}

// GetBankName returns the value of BankName.
func (s *CreateBookingPaymentOKSource1) GetBankName() string {
	return s.BankName
}

// GetCountry returns the value of Country.
func (s *CreateBookingPaymentOKSource1) GetCountry() string {
	return s.Country
}

// SetObject sets the value of Object.
func (s *CreateBookingPaymentOKSource1) SetObject(val OptString) {
	s.Object = val
}

// SetName sets the value of Name.
func (s *CreateBookingPaymentOKSource1) SetName(val string) {
	s.Name = val
}

// SetNumber sets the value of Number.
func (s *CreateBookingPaymentOKSource1) SetNumber(val string) {
	s.Number = val
}

// SetSortCode sets the value of SortCode.
func (s *CreateBookingPaymentOKSource1) SetSortCode(val OptString) {
	s.SortCode = val
}

// SetAccountType sets the value of AccountType.
func (s *CreateBookingPaymentOKSource1) SetAccountType(val CreateBookingPaymentOKSource1AccountType) {
	s.AccountType = val
}

// SetBankName sets the value of BankName.
func (s *CreateBookingPaymentOKSource1) SetBankName(val string) {
	s.BankName = val
}

// SetCountry sets the value of Country.
func (s *CreateBookingPaymentOKSource1) SetCountry(val string) {
	s.Country = val
}

// The type of entity that holds the account. This can be either `individual` or `company`.
type CreateBookingPaymentOKSource1AccountType string

const (
	CreateBookingPaymentOKSource1AccountTypeIndividual CreateBookingPaymentOKSource1AccountType = "individual"
	CreateBookingPaymentOKSource1AccountTypeCompany    CreateBookingPaymentOKSource1AccountType = "company"
)

// AllValues returns all CreateBookingPaymentOKSource1AccountType values.
func (CreateBookingPaymentOKSource1AccountType) AllValues() []CreateBookingPaymentOKSource1AccountType {
	return []CreateBookingPaymentOKSource1AccountType{
		CreateBookingPaymentOKSource1AccountTypeIndividual,
		CreateBookingPaymentOKSource1AccountTypeCompany,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateBookingPaymentOKSource1AccountType) MarshalText() ([]byte, error) {
	switch s {
	case CreateBookingPaymentOKSource1AccountTypeIndividual:
		return []byte(s), nil
	case CreateBookingPaymentOKSource1AccountTypeCompany:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateBookingPaymentOKSource1AccountType) UnmarshalText(data []byte) error {
	switch CreateBookingPaymentOKSource1AccountType(data) {
	case CreateBookingPaymentOKSource1AccountTypeIndividual:
		*s = CreateBookingPaymentOKSource1AccountTypeIndividual
		return nil
	case CreateBookingPaymentOKSource1AccountTypeCompany:
		*s = CreateBookingPaymentOKSource1AccountTypeCompany
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The status of the payment, one of `pending`, `succeeded`, or `failed`.
type CreateBookingPaymentOKStatus string

const (
	CreateBookingPaymentOKStatusPending   CreateBookingPaymentOKStatus = "pending"
	CreateBookingPaymentOKStatusSucceeded CreateBookingPaymentOKStatus = "succeeded"
	CreateBookingPaymentOKStatusFailed    CreateBookingPaymentOKStatus = "failed"
)

// AllValues returns all CreateBookingPaymentOKStatus values.
func (CreateBookingPaymentOKStatus) AllValues() []CreateBookingPaymentOKStatus {
	return []CreateBookingPaymentOKStatus{
		CreateBookingPaymentOKStatusPending,
		CreateBookingPaymentOKStatusSucceeded,
		CreateBookingPaymentOKStatusFailed,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateBookingPaymentOKStatus) MarshalText() ([]byte, error) {
	switch s {
	case CreateBookingPaymentOKStatusPending:
		return []byte(s), nil
	case CreateBookingPaymentOKStatusSucceeded:
		return []byte(s), nil
	case CreateBookingPaymentOKStatusFailed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateBookingPaymentOKStatus) UnmarshalText(data []byte) error {
	switch CreateBookingPaymentOKStatus(data) {
	case CreateBookingPaymentOKStatusPending:
		*s = CreateBookingPaymentOKStatusPending
		return nil
	case CreateBookingPaymentOKStatusSucceeded:
		*s = CreateBookingPaymentOKStatusSucceeded
		return nil
	case CreateBookingPaymentOKStatusFailed:
		*s = CreateBookingPaymentOKStatusFailed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// DeleteBookingNoContent is response for DeleteBooking operation.
type DeleteBookingNoContent struct{}

func (*DeleteBookingNoContent) deleteBookingRes() {}

// ForbiddenHeaders wraps Problem with response headers.
type ForbiddenHeaders struct {
	RateLimit OptString
	Response  Problem
}

// GetRateLimit returns the value of RateLimit.
func (s *ForbiddenHeaders) GetRateLimit() OptString {
	return s.RateLimit
}

// GetResponse returns the value of Response.
func (s *ForbiddenHeaders) GetResponse() Problem {
	return s.Response
}

// SetRateLimit sets the value of RateLimit.
func (s *ForbiddenHeaders) SetRateLimit(val OptString) {
	s.RateLimit = val
}

// SetResponse sets the value of Response.
func (s *ForbiddenHeaders) SetResponse(val Problem) {
	s.Response = val
}

func (*ForbiddenHeaders) createBookingPaymentRes() {}
func (*ForbiddenHeaders) deleteBookingRes()        {}
func (*ForbiddenHeaders) getBookingRes()           {}
func (*ForbiddenHeaders) getBookingsRes()          {}
func (*ForbiddenHeaders) getStationsRes()          {}
func (*ForbiddenHeaders) getTripsRes()             {}

// Merged schema.
type GetBookingOK struct {
	// Unique identifier for the booking.
	ID OptUUID `json:"id"`
	// Identifier of the booked trip.
	TripID OptUUID `json:"trip_id"`
	// Name of the passenger.
	PassengerName OptString `json:"passenger_name"`
	// Indicates whether the passenger has a bicycle.
	HasBicycle OptBool `json:"has_bicycle"`
	// Indicates whether the passenger has a dog.
	HasDog OptBool      `json:"has_dog"`
	Links  OptLinksSelf `json:"links"`
}

// GetID returns the value of ID.
func (s *GetBookingOK) GetID() OptUUID {
	return s.ID
}

// GetTripID returns the value of TripID.
func (s *GetBookingOK) GetTripID() OptUUID {
	return s.TripID
}

// GetPassengerName returns the value of PassengerName.
func (s *GetBookingOK) GetPassengerName() OptString {
	return s.PassengerName
}

// GetHasBicycle returns the value of HasBicycle.
func (s *GetBookingOK) GetHasBicycle() OptBool {
	return s.HasBicycle
}

// GetHasDog returns the value of HasDog.
func (s *GetBookingOK) GetHasDog() OptBool {
	return s.HasDog
}

// GetLinks returns the value of Links.
func (s *GetBookingOK) GetLinks() OptLinksSelf {
	return s.Links
}

// SetID sets the value of ID.
func (s *GetBookingOK) SetID(val OptUUID) {
	s.ID = val
}

// SetTripID sets the value of TripID.
func (s *GetBookingOK) SetTripID(val OptUUID) {
	s.TripID = val
}

// SetPassengerName sets the value of PassengerName.
func (s *GetBookingOK) SetPassengerName(val OptString) {
	s.PassengerName = val
}

// SetHasBicycle sets the value of HasBicycle.
func (s *GetBookingOK) SetHasBicycle(val OptBool) {
	s.HasBicycle = val
}

// SetHasDog sets the value of HasDog.
func (s *GetBookingOK) SetHasDog(val OptBool) {
	s.HasDog = val
}

// SetLinks sets the value of Links.
func (s *GetBookingOK) SetLinks(val OptLinksSelf) {
	s.Links = val
}

// GetBookingOKHeaders wraps GetBookingOK with response headers.
type GetBookingOKHeaders struct {
	CacheControl OptString
	RateLimit    OptString
	Response     GetBookingOK
}

// GetCacheControl returns the value of CacheControl.
func (s *GetBookingOKHeaders) GetCacheControl() OptString {
	return s.CacheControl
}

// GetRateLimit returns the value of RateLimit.
func (s *GetBookingOKHeaders) GetRateLimit() OptString {
	return s.RateLimit
}

// GetResponse returns the value of Response.
func (s *GetBookingOKHeaders) GetResponse() GetBookingOK {
	return s.Response
}

// SetCacheControl sets the value of CacheControl.
func (s *GetBookingOKHeaders) SetCacheControl(val OptString) {
	s.CacheControl = val
}

// SetRateLimit sets the value of RateLimit.
func (s *GetBookingOKHeaders) SetRateLimit(val OptString) {
	s.RateLimit = val
}

// SetResponse sets the value of Response.
func (s *GetBookingOKHeaders) SetResponse(val GetBookingOK) {
	s.Response = val
}

func (*GetBookingOKHeaders) getBookingRes() {}

// Merged schema.
type GetBookingsOK struct {
	// Merged property.
	Data []GetBookingsOKDataItem `json:"data"`
	// Merged property.
	Links OptGetBookingsOKLinks `json:"links"`
}

// GetData returns the value of Data.
func (s *GetBookingsOK) GetData() []GetBookingsOKDataItem {
	return s.Data
}

// GetLinks returns the value of Links.
func (s *GetBookingsOK) GetLinks() OptGetBookingsOKLinks {
	return s.Links
}

// SetData sets the value of Data.
func (s *GetBookingsOK) SetData(val []GetBookingsOKDataItem) {
	s.Data = val
}

// SetLinks sets the value of Links.
func (s *GetBookingsOK) SetLinks(val OptGetBookingsOKLinks) {
	s.Links = val
}

// Merged schema.
type GetBookingsOKDataItem struct {
	// Unique identifier for the booking.
	ID OptUUID `json:"id"`
	// Identifier of the booked trip.
	TripID OptUUID `json:"trip_id"`
	// Name of the passenger.
	PassengerName OptString `json:"passenger_name"`
	// Indicates whether the passenger has a bicycle.
	HasBicycle OptBool `json:"has_bicycle"`
	// Indicates whether the passenger has a dog.
	HasDog OptBool `json:"has_dog"`
}

// GetID returns the value of ID.
func (s *GetBookingsOKDataItem) GetID() OptUUID {
	return s.ID
}

// GetTripID returns the value of TripID.
func (s *GetBookingsOKDataItem) GetTripID() OptUUID {
	return s.TripID
}

// GetPassengerName returns the value of PassengerName.
func (s *GetBookingsOKDataItem) GetPassengerName() OptString {
	return s.PassengerName
}

// GetHasBicycle returns the value of HasBicycle.
func (s *GetBookingsOKDataItem) GetHasBicycle() OptBool {
	return s.HasBicycle
}

// GetHasDog returns the value of HasDog.
func (s *GetBookingsOKDataItem) GetHasDog() OptBool {
	return s.HasDog
}

// SetID sets the value of ID.
func (s *GetBookingsOKDataItem) SetID(val OptUUID) {
	s.ID = val
}

// SetTripID sets the value of TripID.
func (s *GetBookingsOKDataItem) SetTripID(val OptUUID) {
	s.TripID = val
}

// SetPassengerName sets the value of PassengerName.
func (s *GetBookingsOKDataItem) SetPassengerName(val OptString) {
	s.PassengerName = val
}

// SetHasBicycle sets the value of HasBicycle.
func (s *GetBookingsOKDataItem) SetHasBicycle(val OptBool) {
	s.HasBicycle = val
}

// SetHasDog sets the value of HasDog.
func (s *GetBookingsOKDataItem) SetHasDog(val OptBool) {
	s.HasDog = val
}

// GetBookingsOKHeaders wraps GetBookingsOK with response headers.
type GetBookingsOKHeaders struct {
	CacheControl OptString
	RateLimit    OptString
	Response     GetBookingsOK
}

// GetCacheControl returns the value of CacheControl.
func (s *GetBookingsOKHeaders) GetCacheControl() OptString {
	return s.CacheControl
}

// GetRateLimit returns the value of RateLimit.
func (s *GetBookingsOKHeaders) GetRateLimit() OptString {
	return s.RateLimit
}

// GetResponse returns the value of Response.
func (s *GetBookingsOKHeaders) GetResponse() GetBookingsOK {
	return s.Response
}

// SetCacheControl sets the value of CacheControl.
func (s *GetBookingsOKHeaders) SetCacheControl(val OptString) {
	s.CacheControl = val
}

// SetRateLimit sets the value of RateLimit.
func (s *GetBookingsOKHeaders) SetRateLimit(val OptString) {
	s.RateLimit = val
}

// SetResponse sets the value of Response.
func (s *GetBookingsOKHeaders) SetResponse(val GetBookingsOK) {
	s.Response = val
}

func (*GetBookingsOKHeaders) getBookingsRes() {}

// Merged schema.
type GetBookingsOKLinks struct {
	Self OptURI `json:"self"`
	Next OptURI `json:"next"`
	Prev OptURI `json:"prev"`
}

// GetSelf returns the value of Self.
func (s *GetBookingsOKLinks) GetSelf() OptURI {
	return s.Self
}

// GetNext returns the value of Next.
func (s *GetBookingsOKLinks) GetNext() OptURI {
	return s.Next
}

// GetPrev returns the value of Prev.
func (s *GetBookingsOKLinks) GetPrev() OptURI {
	return s.Prev
}

// SetSelf sets the value of Self.
func (s *GetBookingsOKLinks) SetSelf(val OptURI) {
	s.Self = val
}

// SetNext sets the value of Next.
func (s *GetBookingsOKLinks) SetNext(val OptURI) {
	s.Next = val
}

// SetPrev sets the value of Prev.
func (s *GetBookingsOKLinks) SetPrev(val OptURI) {
	s.Prev = val
}

// Merged schema.
type GetStationsOK struct {
	// Merged property.
	Data []GetStationsOKDataItem `json:"data"`
	// Merged property.
	Links OptGetStationsOKLinks `json:"links"`
}

// GetData returns the value of Data.
func (s *GetStationsOK) GetData() []GetStationsOKDataItem {
	return s.Data
}

// GetLinks returns the value of Links.
func (s *GetStationsOK) GetLinks() OptGetStationsOKLinks {
	return s.Links
}

// SetData sets the value of Data.
func (s *GetStationsOK) SetData(val []GetStationsOKDataItem) {
	s.Data = val
}

// SetLinks sets the value of Links.
func (s *GetStationsOK) SetLinks(val OptGetStationsOKLinks) {
	s.Links = val
}

// Merged schema.
type GetStationsOKDataItem struct {
	// Unique identifier for the station.
	ID uuid.UUID `json:"id"`
	// The name of the station.
	Name string `json:"name"`
	// The address of the station.
	Address string `json:"address"`
	// The country code of the station.
	CountryCode string `json:"country_code"`
	// The timezone of the station in the [IANA Time Zone Database format](https://www.iana.
	// org/time-zones).
	Timezone OptString `json:"timezone"`
}

// GetID returns the value of ID.
func (s *GetStationsOKDataItem) GetID() uuid.UUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *GetStationsOKDataItem) GetName() string {
	return s.Name
}

// GetAddress returns the value of Address.
func (s *GetStationsOKDataItem) GetAddress() string {
	return s.Address
}

// GetCountryCode returns the value of CountryCode.
func (s *GetStationsOKDataItem) GetCountryCode() string {
	return s.CountryCode
}

// GetTimezone returns the value of Timezone.
func (s *GetStationsOKDataItem) GetTimezone() OptString {
	return s.Timezone
}

// SetID sets the value of ID.
func (s *GetStationsOKDataItem) SetID(val uuid.UUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *GetStationsOKDataItem) SetName(val string) {
	s.Name = val
}

// SetAddress sets the value of Address.
func (s *GetStationsOKDataItem) SetAddress(val string) {
	s.Address = val
}

// SetCountryCode sets the value of CountryCode.
func (s *GetStationsOKDataItem) SetCountryCode(val string) {
	s.CountryCode = val
}

// SetTimezone sets the value of Timezone.
func (s *GetStationsOKDataItem) SetTimezone(val OptString) {
	s.Timezone = val
}

// GetStationsOKHeaders wraps GetStationsOK with response headers.
type GetStationsOKHeaders struct {
	CacheControl OptString
	RateLimit    OptString
	Response     GetStationsOK
}

// GetCacheControl returns the value of CacheControl.
func (s *GetStationsOKHeaders) GetCacheControl() OptString {
	return s.CacheControl
}

// GetRateLimit returns the value of RateLimit.
func (s *GetStationsOKHeaders) GetRateLimit() OptString {
	return s.RateLimit
}

// GetResponse returns the value of Response.
func (s *GetStationsOKHeaders) GetResponse() GetStationsOK {
	return s.Response
}

// SetCacheControl sets the value of CacheControl.
func (s *GetStationsOKHeaders) SetCacheControl(val OptString) {
	s.CacheControl = val
}

// SetRateLimit sets the value of RateLimit.
func (s *GetStationsOKHeaders) SetRateLimit(val OptString) {
	s.RateLimit = val
}

// SetResponse sets the value of Response.
func (s *GetStationsOKHeaders) SetResponse(val GetStationsOK) {
	s.Response = val
}

func (*GetStationsOKHeaders) getStationsRes() {}

// Merged schema.
type GetStationsOKLinks struct {
	Self OptURI `json:"self"`
	Next OptURI `json:"next"`
	Prev OptURI `json:"prev"`
}

// GetSelf returns the value of Self.
func (s *GetStationsOKLinks) GetSelf() OptURI {
	return s.Self
}

// GetNext returns the value of Next.
func (s *GetStationsOKLinks) GetNext() OptURI {
	return s.Next
}

// GetPrev returns the value of Prev.
func (s *GetStationsOKLinks) GetPrev() OptURI {
	return s.Prev
}

// SetSelf sets the value of Self.
func (s *GetStationsOKLinks) SetSelf(val OptURI) {
	s.Self = val
}

// SetNext sets the value of Next.
func (s *GetStationsOKLinks) SetNext(val OptURI) {
	s.Next = val
}

// SetPrev sets the value of Prev.
func (s *GetStationsOKLinks) SetPrev(val OptURI) {
	s.Prev = val
}

// Merged schema.
type GetTripsOK struct {
	// Merged property.
	Data []GetTripsOKDataItem `json:"data"`
	// Merged property.
	Links OptGetTripsOKLinks `json:"links"`
}

// GetData returns the value of Data.
func (s *GetTripsOK) GetData() []GetTripsOKDataItem {
	return s.Data
}

// GetLinks returns the value of Links.
func (s *GetTripsOK) GetLinks() OptGetTripsOKLinks {
	return s.Links
}

// SetData sets the value of Data.
func (s *GetTripsOK) SetData(val []GetTripsOKDataItem) {
	s.Data = val
}

// SetLinks sets the value of Links.
func (s *GetTripsOK) SetLinks(val OptGetTripsOKLinks) {
	s.Links = val
}

// Merged schema.
type GetTripsOKDataItem struct {
	// Unique identifier for the trip.
	ID OptUUID `json:"id"`
	// The starting station of the trip.
	Origin OptString `json:"origin"`
	// The destination station of the trip.
	Destination OptString `json:"destination"`
	// The date and time when the trip departs.
	DepartureTime OptDateTime `json:"departure_time"`
	// The date and time when the trip arrives.
	ArrivalTime OptDateTime `json:"arrival_time"`
	// The name of the operator of the trip.
	Operator OptString `json:"operator"`
	// The cost of the trip.
	Price OptFloat64 `json:"price"`
	// Indicates whether bicycles are allowed on the trip.
	BicyclesAllowed OptBool `json:"bicycles_allowed"`
	// Indicates whether dogs are allowed on the trip.
	DogsAllowed OptBool `json:"dogs_allowed"`
	// Merged property.
	Self OptURI `json:"self"`
}

// GetID returns the value of ID.
func (s *GetTripsOKDataItem) GetID() OptUUID {
	return s.ID
}

// GetOrigin returns the value of Origin.
func (s *GetTripsOKDataItem) GetOrigin() OptString {
	return s.Origin
}

// GetDestination returns the value of Destination.
func (s *GetTripsOKDataItem) GetDestination() OptString {
	return s.Destination
}

// GetDepartureTime returns the value of DepartureTime.
func (s *GetTripsOKDataItem) GetDepartureTime() OptDateTime {
	return s.DepartureTime
}

// GetArrivalTime returns the value of ArrivalTime.
func (s *GetTripsOKDataItem) GetArrivalTime() OptDateTime {
	return s.ArrivalTime
}

// GetOperator returns the value of Operator.
func (s *GetTripsOKDataItem) GetOperator() OptString {
	return s.Operator
}

// GetPrice returns the value of Price.
func (s *GetTripsOKDataItem) GetPrice() OptFloat64 {
	return s.Price
}

// GetBicyclesAllowed returns the value of BicyclesAllowed.
func (s *GetTripsOKDataItem) GetBicyclesAllowed() OptBool {
	return s.BicyclesAllowed
}

// GetDogsAllowed returns the value of DogsAllowed.
func (s *GetTripsOKDataItem) GetDogsAllowed() OptBool {
	return s.DogsAllowed
}

// GetSelf returns the value of Self.
func (s *GetTripsOKDataItem) GetSelf() OptURI {
	return s.Self
}

// SetID sets the value of ID.
func (s *GetTripsOKDataItem) SetID(val OptUUID) {
	s.ID = val
}

// SetOrigin sets the value of Origin.
func (s *GetTripsOKDataItem) SetOrigin(val OptString) {
	s.Origin = val
}

// SetDestination sets the value of Destination.
func (s *GetTripsOKDataItem) SetDestination(val OptString) {
	s.Destination = val
}

// SetDepartureTime sets the value of DepartureTime.
func (s *GetTripsOKDataItem) SetDepartureTime(val OptDateTime) {
	s.DepartureTime = val
}

// SetArrivalTime sets the value of ArrivalTime.
func (s *GetTripsOKDataItem) SetArrivalTime(val OptDateTime) {
	s.ArrivalTime = val
}

// SetOperator sets the value of Operator.
func (s *GetTripsOKDataItem) SetOperator(val OptString) {
	s.Operator = val
}

// SetPrice sets the value of Price.
func (s *GetTripsOKDataItem) SetPrice(val OptFloat64) {
	s.Price = val
}

// SetBicyclesAllowed sets the value of BicyclesAllowed.
func (s *GetTripsOKDataItem) SetBicyclesAllowed(val OptBool) {
	s.BicyclesAllowed = val
}

// SetDogsAllowed sets the value of DogsAllowed.
func (s *GetTripsOKDataItem) SetDogsAllowed(val OptBool) {
	s.DogsAllowed = val
}

// SetSelf sets the value of Self.
func (s *GetTripsOKDataItem) SetSelf(val OptURI) {
	s.Self = val
}

// GetTripsOKHeaders wraps GetTripsOK with response headers.
type GetTripsOKHeaders struct {
	CacheControl OptString
	RateLimit    OptString
	Response     GetTripsOK
}

// GetCacheControl returns the value of CacheControl.
func (s *GetTripsOKHeaders) GetCacheControl() OptString {
	return s.CacheControl
}

// GetRateLimit returns the value of RateLimit.
func (s *GetTripsOKHeaders) GetRateLimit() OptString {
	return s.RateLimit
}

// GetResponse returns the value of Response.
func (s *GetTripsOKHeaders) GetResponse() GetTripsOK {
	return s.Response
}

// SetCacheControl sets the value of CacheControl.
func (s *GetTripsOKHeaders) SetCacheControl(val OptString) {
	s.CacheControl = val
}

// SetRateLimit sets the value of RateLimit.
func (s *GetTripsOKHeaders) SetRateLimit(val OptString) {
	s.RateLimit = val
}

// SetResponse sets the value of Response.
func (s *GetTripsOKHeaders) SetResponse(val GetTripsOK) {
	s.Response = val
}

func (*GetTripsOKHeaders) getTripsRes() {}

// Merged schema.
type GetTripsOKLinks struct {
	Self OptURI `json:"self"`
	Next OptURI `json:"next"`
	Prev OptURI `json:"prev"`
}

// GetSelf returns the value of Self.
func (s *GetTripsOKLinks) GetSelf() OptURI {
	return s.Self
}

// GetNext returns the value of Next.
func (s *GetTripsOKLinks) GetNext() OptURI {
	return s.Next
}

// GetPrev returns the value of Prev.
func (s *GetTripsOKLinks) GetPrev() OptURI {
	return s.Prev
}

// SetSelf sets the value of Self.
func (s *GetTripsOKLinks) SetSelf(val OptURI) {
	s.Self = val
}

// SetNext sets the value of Next.
func (s *GetTripsOKLinks) SetNext(val OptURI) {
	s.Next = val
}

// SetPrev sets the value of Prev.
func (s *GetTripsOKLinks) SetPrev(val OptURI) {
	s.Prev = val
}

// InternalServerErrorHeaders wraps Problem with response headers.
type InternalServerErrorHeaders struct {
	RateLimit OptString
	Response  Problem
}

// GetRateLimit returns the value of RateLimit.
func (s *InternalServerErrorHeaders) GetRateLimit() OptString {
	return s.RateLimit
}

// GetResponse returns the value of Response.
func (s *InternalServerErrorHeaders) GetResponse() Problem {
	return s.Response
}

// SetRateLimit sets the value of RateLimit.
func (s *InternalServerErrorHeaders) SetRateLimit(val OptString) {
	s.RateLimit = val
}

// SetResponse sets the value of Response.
func (s *InternalServerErrorHeaders) SetResponse(val Problem) {
	s.Response = val
}

func (*InternalServerErrorHeaders) createBookingPaymentRes() {}
func (*InternalServerErrorHeaders) createBookingRes()        {}
func (*InternalServerErrorHeaders) deleteBookingRes()        {}
func (*InternalServerErrorHeaders) getBookingRes()           {}
func (*InternalServerErrorHeaders) getBookingsRes()          {}
func (*InternalServerErrorHeaders) getStationsRes()          {}
func (*InternalServerErrorHeaders) getTripsRes()             {}

// Ref: #/components/schemas/Links-Booking
type LinksBooking struct {
	Booking OptURI `json:"booking"`
}

// GetBooking returns the value of Booking.
func (s *LinksBooking) GetBooking() OptURI {
	return s.Booking
}

// SetBooking sets the value of Booking.
func (s *LinksBooking) SetBooking(val OptURI) {
	s.Booking = val
}

// Ref: #/components/schemas/Links-Self
type LinksSelf struct {
	Self OptURI `json:"self"`
}

// GetSelf returns the value of Self.
func (s *LinksSelf) GetSelf() OptURI {
	return s.Self
}

// SetSelf sets the value of Self.
func (s *LinksSelf) SetSelf(val OptURI) {
	s.Self = val
}

// NewBookingOK is response for NewBooking operation.
type NewBookingOK struct{}

// Merged schema.
type NewBookingReq struct {
	// Unique identifier for the booking.
	ID OptUUID `json:"id"`
	// Identifier of the booked trip.
	TripID OptUUID `json:"trip_id"`
	// Name of the passenger.
	PassengerName OptString `json:"passenger_name"`
	// Indicates whether the passenger has a bicycle.
	HasBicycle OptBool `json:"has_bicycle"`
	// Indicates whether the passenger has a dog.
	HasDog OptBool               `json:"has_dog"`
	Links  OptNewBookingReqLinks `json:"links"`
}

// GetID returns the value of ID.
func (s *NewBookingReq) GetID() OptUUID {
	return s.ID
}

// GetTripID returns the value of TripID.
func (s *NewBookingReq) GetTripID() OptUUID {
	return s.TripID
}

// GetPassengerName returns the value of PassengerName.
func (s *NewBookingReq) GetPassengerName() OptString {
	return s.PassengerName
}

// GetHasBicycle returns the value of HasBicycle.
func (s *NewBookingReq) GetHasBicycle() OptBool {
	return s.HasBicycle
}

// GetHasDog returns the value of HasDog.
func (s *NewBookingReq) GetHasDog() OptBool {
	return s.HasDog
}

// GetLinks returns the value of Links.
func (s *NewBookingReq) GetLinks() OptNewBookingReqLinks {
	return s.Links
}

// SetID sets the value of ID.
func (s *NewBookingReq) SetID(val OptUUID) {
	s.ID = val
}

// SetTripID sets the value of TripID.
func (s *NewBookingReq) SetTripID(val OptUUID) {
	s.TripID = val
}

// SetPassengerName sets the value of PassengerName.
func (s *NewBookingReq) SetPassengerName(val OptString) {
	s.PassengerName = val
}

// SetHasBicycle sets the value of HasBicycle.
func (s *NewBookingReq) SetHasBicycle(val OptBool) {
	s.HasBicycle = val
}

// SetHasDog sets the value of HasDog.
func (s *NewBookingReq) SetHasDog(val OptBool) {
	s.HasDog = val
}

// SetLinks sets the value of Links.
func (s *NewBookingReq) SetLinks(val OptNewBookingReqLinks) {
	s.Links = val
}

// Merged schema.
type NewBookingReqLinks struct {
	Self OptURI `json:"self"`
	Next OptURI `json:"next"`
	Prev OptURI `json:"prev"`
}

// GetSelf returns the value of Self.
func (s *NewBookingReqLinks) GetSelf() OptURI {
	return s.Self
}

// GetNext returns the value of Next.
func (s *NewBookingReqLinks) GetNext() OptURI {
	return s.Next
}

// GetPrev returns the value of Prev.
func (s *NewBookingReqLinks) GetPrev() OptURI {
	return s.Prev
}

// SetSelf sets the value of Self.
func (s *NewBookingReqLinks) SetSelf(val OptURI) {
	s.Self = val
}

// SetNext sets the value of Next.
func (s *NewBookingReqLinks) SetNext(val OptURI) {
	s.Next = val
}

// SetPrev sets the value of Prev.
func (s *NewBookingReqLinks) SetPrev(val OptURI) {
	s.Prev = val
}

// NotFoundHeaders wraps Problem with response headers.
type NotFoundHeaders struct {
	RateLimit OptString
	Response  Problem
}

// GetRateLimit returns the value of RateLimit.
func (s *NotFoundHeaders) GetRateLimit() OptString {
	return s.RateLimit
}

// GetResponse returns the value of Response.
func (s *NotFoundHeaders) GetResponse() Problem {
	return s.Response
}

// SetRateLimit sets the value of RateLimit.
func (s *NotFoundHeaders) SetRateLimit(val OptString) {
	s.RateLimit = val
}

// SetResponse sets the value of Response.
func (s *NotFoundHeaders) SetResponse(val Problem) {
	s.Response = val
}

func (*NotFoundHeaders) createBookingRes() {}
func (*NotFoundHeaders) deleteBookingRes() {}
func (*NotFoundHeaders) getBookingRes()    {}

type OAuth2 struct {
	Token  string
	Scopes []string
}

// GetToken returns the value of Token.
func (s *OAuth2) GetToken() string {
	return s.Token
}

// GetScopes returns the value of Scopes.
func (s *OAuth2) GetScopes() []string {
	return s.Scopes
}

// SetToken sets the value of Token.
func (s *OAuth2) SetToken(val string) {
	s.Token = val
}

// SetScopes sets the value of Scopes.
func (s *OAuth2) SetScopes(val []string) {
	s.Scopes = val
}

// NewOptBookingPaymentCurrency returns new OptBookingPaymentCurrency with value set to v.
func NewOptBookingPaymentCurrency(v BookingPaymentCurrency) OptBookingPaymentCurrency {
	return OptBookingPaymentCurrency{
		Value: v,
		Set:   true,
	}
}

// OptBookingPaymentCurrency is optional BookingPaymentCurrency.
type OptBookingPaymentCurrency struct {
	Value BookingPaymentCurrency
	Set   bool
}

// IsSet returns true if OptBookingPaymentCurrency was set.
func (o OptBookingPaymentCurrency) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBookingPaymentCurrency) Reset() {
	var v BookingPaymentCurrency
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBookingPaymentCurrency) SetTo(v BookingPaymentCurrency) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBookingPaymentCurrency) Get() (v BookingPaymentCurrency, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBookingPaymentCurrency) Or(d BookingPaymentCurrency) BookingPaymentCurrency {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBookingPaymentSource returns new OptBookingPaymentSource with value set to v.
func NewOptBookingPaymentSource(v BookingPaymentSource) OptBookingPaymentSource {
	return OptBookingPaymentSource{
		Value: v,
		Set:   true,
	}
}

// OptBookingPaymentSource is optional BookingPaymentSource.
type OptBookingPaymentSource struct {
	Value BookingPaymentSource
	Set   bool
}

// IsSet returns true if OptBookingPaymentSource was set.
func (o OptBookingPaymentSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBookingPaymentSource) Reset() {
	var v BookingPaymentSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBookingPaymentSource) SetTo(v BookingPaymentSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBookingPaymentSource) Get() (v BookingPaymentSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBookingPaymentSource) Or(d BookingPaymentSource) BookingPaymentSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBookingPaymentStatus returns new OptBookingPaymentStatus with value set to v.
func NewOptBookingPaymentStatus(v BookingPaymentStatus) OptBookingPaymentStatus {
	return OptBookingPaymentStatus{
		Value: v,
		Set:   true,
	}
}

// OptBookingPaymentStatus is optional BookingPaymentStatus.
type OptBookingPaymentStatus struct {
	Value BookingPaymentStatus
	Set   bool
}

// IsSet returns true if OptBookingPaymentStatus was set.
func (o OptBookingPaymentStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBookingPaymentStatus) Reset() {
	var v BookingPaymentStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBookingPaymentStatus) SetTo(v BookingPaymentStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBookingPaymentStatus) Get() (v BookingPaymentStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBookingPaymentStatus) Or(d BookingPaymentStatus) BookingPaymentStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateBookingPaymentOKCurrency returns new OptCreateBookingPaymentOKCurrency with value set to v.
func NewOptCreateBookingPaymentOKCurrency(v CreateBookingPaymentOKCurrency) OptCreateBookingPaymentOKCurrency {
	return OptCreateBookingPaymentOKCurrency{
		Value: v,
		Set:   true,
	}
}

// OptCreateBookingPaymentOKCurrency is optional CreateBookingPaymentOKCurrency.
type OptCreateBookingPaymentOKCurrency struct {
	Value CreateBookingPaymentOKCurrency
	Set   bool
}

// IsSet returns true if OptCreateBookingPaymentOKCurrency was set.
func (o OptCreateBookingPaymentOKCurrency) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateBookingPaymentOKCurrency) Reset() {
	var v CreateBookingPaymentOKCurrency
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateBookingPaymentOKCurrency) SetTo(v CreateBookingPaymentOKCurrency) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateBookingPaymentOKCurrency) Get() (v CreateBookingPaymentOKCurrency, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateBookingPaymentOKCurrency) Or(d CreateBookingPaymentOKCurrency) CreateBookingPaymentOKCurrency {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateBookingPaymentOKSource returns new OptCreateBookingPaymentOKSource with value set to v.
func NewOptCreateBookingPaymentOKSource(v CreateBookingPaymentOKSource) OptCreateBookingPaymentOKSource {
	return OptCreateBookingPaymentOKSource{
		Value: v,
		Set:   true,
	}
}

// OptCreateBookingPaymentOKSource is optional CreateBookingPaymentOKSource.
type OptCreateBookingPaymentOKSource struct {
	Value CreateBookingPaymentOKSource
	Set   bool
}

// IsSet returns true if OptCreateBookingPaymentOKSource was set.
func (o OptCreateBookingPaymentOKSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateBookingPaymentOKSource) Reset() {
	var v CreateBookingPaymentOKSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateBookingPaymentOKSource) SetTo(v CreateBookingPaymentOKSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateBookingPaymentOKSource) Get() (v CreateBookingPaymentOKSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateBookingPaymentOKSource) Or(d CreateBookingPaymentOKSource) CreateBookingPaymentOKSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateBookingPaymentOKStatus returns new OptCreateBookingPaymentOKStatus with value set to v.
func NewOptCreateBookingPaymentOKStatus(v CreateBookingPaymentOKStatus) OptCreateBookingPaymentOKStatus {
	return OptCreateBookingPaymentOKStatus{
		Value: v,
		Set:   true,
	}
}

// OptCreateBookingPaymentOKStatus is optional CreateBookingPaymentOKStatus.
type OptCreateBookingPaymentOKStatus struct {
	Value CreateBookingPaymentOKStatus
	Set   bool
}

// IsSet returns true if OptCreateBookingPaymentOKStatus was set.
func (o OptCreateBookingPaymentOKStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateBookingPaymentOKStatus) Reset() {
	var v CreateBookingPaymentOKStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateBookingPaymentOKStatus) SetTo(v CreateBookingPaymentOKStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateBookingPaymentOKStatus) Get() (v CreateBookingPaymentOKStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateBookingPaymentOKStatus) Or(d CreateBookingPaymentOKStatus) CreateBookingPaymentOKStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetBookingsOKLinks returns new OptGetBookingsOKLinks with value set to v.
func NewOptGetBookingsOKLinks(v GetBookingsOKLinks) OptGetBookingsOKLinks {
	return OptGetBookingsOKLinks{
		Value: v,
		Set:   true,
	}
}

// OptGetBookingsOKLinks is optional GetBookingsOKLinks.
type OptGetBookingsOKLinks struct {
	Value GetBookingsOKLinks
	Set   bool
}

// IsSet returns true if OptGetBookingsOKLinks was set.
func (o OptGetBookingsOKLinks) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetBookingsOKLinks) Reset() {
	var v GetBookingsOKLinks
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetBookingsOKLinks) SetTo(v GetBookingsOKLinks) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetBookingsOKLinks) Get() (v GetBookingsOKLinks, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetBookingsOKLinks) Or(d GetBookingsOKLinks) GetBookingsOKLinks {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetStationsOKLinks returns new OptGetStationsOKLinks with value set to v.
func NewOptGetStationsOKLinks(v GetStationsOKLinks) OptGetStationsOKLinks {
	return OptGetStationsOKLinks{
		Value: v,
		Set:   true,
	}
}

// OptGetStationsOKLinks is optional GetStationsOKLinks.
type OptGetStationsOKLinks struct {
	Value GetStationsOKLinks
	Set   bool
}

// IsSet returns true if OptGetStationsOKLinks was set.
func (o OptGetStationsOKLinks) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetStationsOKLinks) Reset() {
	var v GetStationsOKLinks
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetStationsOKLinks) SetTo(v GetStationsOKLinks) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetStationsOKLinks) Get() (v GetStationsOKLinks, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetStationsOKLinks) Or(d GetStationsOKLinks) GetStationsOKLinks {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetTripsOKLinks returns new OptGetTripsOKLinks with value set to v.
func NewOptGetTripsOKLinks(v GetTripsOKLinks) OptGetTripsOKLinks {
	return OptGetTripsOKLinks{
		Value: v,
		Set:   true,
	}
}

// OptGetTripsOKLinks is optional GetTripsOKLinks.
type OptGetTripsOKLinks struct {
	Value GetTripsOKLinks
	Set   bool
}

// IsSet returns true if OptGetTripsOKLinks was set.
func (o OptGetTripsOKLinks) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetTripsOKLinks) Reset() {
	var v GetTripsOKLinks
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetTripsOKLinks) SetTo(v GetTripsOKLinks) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetTripsOKLinks) Get() (v GetTripsOKLinks, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetTripsOKLinks) Or(d GetTripsOKLinks) GetTripsOKLinks {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLinksBooking returns new OptLinksBooking with value set to v.
func NewOptLinksBooking(v LinksBooking) OptLinksBooking {
	return OptLinksBooking{
		Value: v,
		Set:   true,
	}
}

// OptLinksBooking is optional LinksBooking.
type OptLinksBooking struct {
	Value LinksBooking
	Set   bool
}

// IsSet returns true if OptLinksBooking was set.
func (o OptLinksBooking) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLinksBooking) Reset() {
	var v LinksBooking
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLinksBooking) SetTo(v LinksBooking) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLinksBooking) Get() (v LinksBooking, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLinksBooking) Or(d LinksBooking) LinksBooking {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLinksSelf returns new OptLinksSelf with value set to v.
func NewOptLinksSelf(v LinksSelf) OptLinksSelf {
	return OptLinksSelf{
		Value: v,
		Set:   true,
	}
}

// OptLinksSelf is optional LinksSelf.
type OptLinksSelf struct {
	Value LinksSelf
	Set   bool
}

// IsSet returns true if OptLinksSelf was set.
func (o OptLinksSelf) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLinksSelf) Reset() {
	var v LinksSelf
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLinksSelf) SetTo(v LinksSelf) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLinksSelf) Get() (v LinksSelf, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLinksSelf) Or(d LinksSelf) LinksSelf {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNewBookingReqLinks returns new OptNewBookingReqLinks with value set to v.
func NewOptNewBookingReqLinks(v NewBookingReqLinks) OptNewBookingReqLinks {
	return OptNewBookingReqLinks{
		Value: v,
		Set:   true,
	}
}

// OptNewBookingReqLinks is optional NewBookingReqLinks.
type OptNewBookingReqLinks struct {
	Value NewBookingReqLinks
	Set   bool
}

// IsSet returns true if OptNewBookingReqLinks was set.
func (o OptNewBookingReqLinks) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNewBookingReqLinks) Reset() {
	var v NewBookingReqLinks
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNewBookingReqLinks) SetTo(v NewBookingReqLinks) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNewBookingReqLinks) Get() (v NewBookingReqLinks, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNewBookingReqLinks) Or(d NewBookingReqLinks) NewBookingReqLinks {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptURI returns new OptURI with value set to v.
func NewOptURI(v url.URL) OptURI {
	return OptURI{
		Value: v,
		Set:   true,
	}
}

// OptURI is optional url.URL.
type OptURI struct {
	Value url.URL
	Set   bool
}

// IsSet returns true if OptURI was set.
func (o OptURI) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptURI) Reset() {
	var v url.URL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptURI) SetTo(v url.URL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptURI) Get() (v url.URL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptURI) Or(d url.URL) url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Problem
type Problem struct {
	// A URI reference that identifies the problem type.
	Type OptString `json:"type"`
	// A short, human-readable summary of the problem type.
	Title OptString `json:"title"`
	// A human-readable explanation specific to this occurrence of the problem.
	Detail OptString `json:"detail"`
	// A URI reference that identifies the specific occurrence of the problem.
	Instance OptString `json:"instance"`
	// The HTTP status code.
	Status OptInt `json:"status"`
}

// GetType returns the value of Type.
func (s *Problem) GetType() OptString {
	return s.Type
}

// GetTitle returns the value of Title.
func (s *Problem) GetTitle() OptString {
	return s.Title
}

// GetDetail returns the value of Detail.
func (s *Problem) GetDetail() OptString {
	return s.Detail
}

// GetInstance returns the value of Instance.
func (s *Problem) GetInstance() OptString {
	return s.Instance
}

// GetStatus returns the value of Status.
func (s *Problem) GetStatus() OptInt {
	return s.Status
}

// SetType sets the value of Type.
func (s *Problem) SetType(val OptString) {
	s.Type = val
}

// SetTitle sets the value of Title.
func (s *Problem) SetTitle(val OptString) {
	s.Title = val
}

// SetDetail sets the value of Detail.
func (s *Problem) SetDetail(val OptString) {
	s.Detail = val
}

// SetInstance sets the value of Instance.
func (s *Problem) SetInstance(val OptString) {
	s.Instance = val
}

// SetStatus sets the value of Status.
func (s *Problem) SetStatus(val OptInt) {
	s.Status = val
}

// TooManyRequestsHeaders wraps Problem with response headers.
type TooManyRequestsHeaders struct {
	RateLimit  OptString
	RetryAfter OptString
	Response   Problem
}

// GetRateLimit returns the value of RateLimit.
func (s *TooManyRequestsHeaders) GetRateLimit() OptString {
	return s.RateLimit
}

// GetRetryAfter returns the value of RetryAfter.
func (s *TooManyRequestsHeaders) GetRetryAfter() OptString {
	return s.RetryAfter
}

// GetResponse returns the value of Response.
func (s *TooManyRequestsHeaders) GetResponse() Problem {
	return s.Response
}

// SetRateLimit sets the value of RateLimit.
func (s *TooManyRequestsHeaders) SetRateLimit(val OptString) {
	s.RateLimit = val
}

// SetRetryAfter sets the value of RetryAfter.
func (s *TooManyRequestsHeaders) SetRetryAfter(val OptString) {
	s.RetryAfter = val
}

// SetResponse sets the value of Response.
func (s *TooManyRequestsHeaders) SetResponse(val Problem) {
	s.Response = val
}

func (*TooManyRequestsHeaders) createBookingPaymentRes() {}
func (*TooManyRequestsHeaders) createBookingRes()        {}
func (*TooManyRequestsHeaders) deleteBookingRes()        {}
func (*TooManyRequestsHeaders) getBookingRes()           {}
func (*TooManyRequestsHeaders) getBookingsRes()          {}
func (*TooManyRequestsHeaders) getStationsRes()          {}
func (*TooManyRequestsHeaders) getTripsRes()             {}

// UnauthorizedHeaders wraps Problem with response headers.
type UnauthorizedHeaders struct {
	RateLimit OptString
	Response  Problem
}

// GetRateLimit returns the value of RateLimit.
func (s *UnauthorizedHeaders) GetRateLimit() OptString {
	return s.RateLimit
}

// GetResponse returns the value of Response.
func (s *UnauthorizedHeaders) GetResponse() Problem {
	return s.Response
}

// SetRateLimit sets the value of RateLimit.
func (s *UnauthorizedHeaders) SetRateLimit(val OptString) {
	s.RateLimit = val
}

// SetResponse sets the value of Response.
func (s *UnauthorizedHeaders) SetResponse(val Problem) {
	s.Response = val
}

func (*UnauthorizedHeaders) createBookingPaymentRes() {}
func (*UnauthorizedHeaders) createBookingRes()        {}
func (*UnauthorizedHeaders) deleteBookingRes()        {}
func (*UnauthorizedHeaders) getBookingRes()           {}
func (*UnauthorizedHeaders) getBookingsRes()          {}
func (*UnauthorizedHeaders) getStationsRes()          {}
func (*UnauthorizedHeaders) getTripsRes()             {}
