/*
Train Travel API

API for finding and booking train trips across Europe.  ## Run in Postman  Experiment with this API in Postman, using our Postman Collection.  [![Run In Postman](https://run.pstmn.io/button.svg =128pxx32px)](https://app.getpostman.com/run-collection/9265903-7a75a0d0-b108-4436-ba54-c6139698dc08?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D9265903-7a75a0d0-b108-4436-ba54-c6139698dc08%26entityType%3Dcollection%26workspaceId%3Df507f69d-9564-419c-89a2-cb8e4c8c7b8f)

API version: 1.2.0
Contact: support@example.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oas

import (
	"encoding/json"
)

// checks if the WrapperCollection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WrapperCollection{}

// WrapperCollection This is a generic request/response wrapper which contains both data and links which serve as hypermedia controls (HATEOAS).
type WrapperCollection struct {
	// The wrapper for a collection is an array of objects.
	Data []map[string]interface{} `json:"data,omitempty"`
	// A set of hypermedia links which serve as controls for the client.
	Links map[string]interface{} `json:"links,omitempty"`
}

// NewWrapperCollection instantiates a new WrapperCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWrapperCollection() *WrapperCollection {
	this := WrapperCollection{}
	return &this
}

// NewWrapperCollectionWithDefaults instantiates a new WrapperCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWrapperCollectionWithDefaults() *WrapperCollection {
	this := WrapperCollection{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *WrapperCollection) GetData() []map[string]interface{} {
	if o == nil || IsNil(o.Data) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WrapperCollection) GetDataOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *WrapperCollection) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []map[string]interface{} and assigns it to the Data field.
func (o *WrapperCollection) SetData(v []map[string]interface{}) {
	o.Data = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *WrapperCollection) GetLinks() map[string]interface{} {
	if o == nil || IsNil(o.Links) {
		var ret map[string]interface{}
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WrapperCollection) GetLinksOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Links) {
		return map[string]interface{}{}, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *WrapperCollection) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]interface{} and assigns it to the Links field.
func (o *WrapperCollection) SetLinks(v map[string]interface{}) {
	o.Links = v
}

func (o WrapperCollection) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WrapperCollection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	return toSerialize, nil
}

type NullableWrapperCollection struct {
	value *WrapperCollection
	isSet bool
}

func (v NullableWrapperCollection) Get() *WrapperCollection {
	return v.value
}

func (v *NullableWrapperCollection) Set(val *WrapperCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableWrapperCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableWrapperCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWrapperCollection(val *WrapperCollection) *NullableWrapperCollection {
	return &NullableWrapperCollection{value: val, isSet: true}
}

func (v NullableWrapperCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWrapperCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
