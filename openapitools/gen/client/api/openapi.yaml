openapi: 3.1.0
info:
  contact:
    email: support@example.com
    name: Train Support
    url: https://example.com/support
  description: |
    API for finding and booking train trips across Europe.

    ## Run in Postman

    Experiment with this API in Postman, using our Postman Collection.

    [![Run In Postman](https://run.pstmn.io/button.svg =128pxx32px)](https://app.getpostman.com/run-collection/9265903-7a75a0d0-b108-4436-ba54-c6139698dc08?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D9265903-7a75a0d0-b108-4436-ba54-c6139698dc08%26entityType%3Dcollection%26workspaceId%3Df507f69d-9564-419c-89a2-cb8e4c8c7b8f)
  license:
    name: Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International
  title: Train Travel API
  version: 1.2.0
  x-feedbackLink:
    label: Submit Feedback
    url: https://github.com/bump-sh-examples/train-travel-api/issues/new
servers:
- description: Mock Server
  url: https://try.microcks.io/rest/Train+Travel+API/1.0.0
  x-internal: false
- description: Production
  url: https://api.example.com
  x-internal: false
security:
- OAuth2:
  - read
tags:
- description: |
    Find and filter train stations across Europe, including their location
    and local timezone.
  name: Stations
- description: |
    Timetables and routes for train trips between stations, including pricing
    and availability.
  name: Trips
- description: |
    Create and manage bookings for train trips, including passenger details
    and optional extras.
  name: Bookings
- description: "Pay for bookings using a card or bank account, and view payment\n\
    status and history.\n\n> warn\n> Bookings usually expire within 1 hour so you'll\
    \ need to make your payment\n> before the expiry date \n"
  name: Payments
paths:
  /stations:
    get:
      description: Returns a paginated and searchable list of all train stations.
      operationId: get-stations
      parameters:
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/limit'
      - description: |
          The latitude and longitude of the user's location, to narrow down the search results to sites within a proximity of this location.
        example: "52.5200,13.4050"
        explode: true
        in: query
        name: coordinates
        required: false
        schema:
          type: string
        style: form
      - description: |
          A search term to filter the list of stations by name or address.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: Filter stations by country code
        example: DE
        explode: true
        in: query
        name: country
        required: false
        schema:
          format: iso-country-code
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                data:
                - id: efdbb9d1-02c2-4bc3-afb7-6788d8782b1e
                  name: Berlin Hauptbahnhof
                  address: "Invalidenstra√üe 10557 Berlin, Germany"
                  country_code: DE
                  timezone: Europe/Berlin
                - id: b2e783e1-c824-4d63-b37a-d8d698862f1d
                  name: Paris Gare du Nord
                  address: "18 Rue de Dunkerque 75010 Paris, France"
                  country_code: FR
                  timezone: Europe/Paris
                links:
                  self: https://api.example.com/stations&page=2
                  next: https://api.example.com/stations?page=3
                  prev: https://api.example.com/stations?page=1
              schema:
                $ref: '#/components/schemas/get_stations_200_response'
            application/xml:
              schema:
                $ref: '#/components/schemas/get_stations_200_response_1'
          description: OK
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            RateLimit:
              $ref: '#/components/headers/RateLimit'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Get a list of train stations
      tags:
      - Stations
  /trips:
    get:
      description: |
        Returns a list of available train trips between the specified origin and destination stations on the given date, and allows for filtering by bicycle and dog allowances.
      operationId: get-trips
      parameters:
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/limit'
      - description: The ID of the origin station
        example: efdbb9d1-02c2-4bc3-afb7-6788d8782b1e
        explode: true
        in: query
        name: origin
        required: true
        schema:
          format: uuid
          type: string
        style: form
      - description: The ID of the destination station
        example: b2e783e1-c824-4d63-b37a-d8d698862f1d
        explode: true
        in: query
        name: destination
        required: true
        schema:
          format: uuid
          type: string
        style: form
      - description: The date and time of the trip in ISO 8601 format in origin station's
          timezone.
        example: 2024-02-01T09:00:00Z
        explode: true
        in: query
        name: date
        required: true
        schema:
          format: date-time
          type: string
        style: form
      - description: Only return trips where bicycles are known to be allowed
        explode: true
        in: query
        name: bicycles
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Only return trips where dogs are known to be allowed
        explode: true
        in: query
        name: dogs
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                data:
                - id: ea399ba1-6d95-433f-92d1-83f67b775594
                  origin: efdbb9d1-02c2-4bc3-afb7-6788d8782b1e
                  destination: b2e783e1-c824-4d63-b37a-d8d698862f1d
                  departure_time: 2024-02-01T10:00:00Z
                  arrival_time: 2024-02-01T16:00:00Z
                  price: 50
                  operator: Deutsche Bahn
                  bicycles_allowed: true
                  dogs_allowed: true
                  links:
                    self: https://api.example.com/trips/ea399ba1-6d95-433f-92d1-83f67b775594
                    origin: https://api.example.com/stations/efdbb9d1-02c2-4bc3-afb7-6788d8782b1e
                    destination: https://api.example.com/stations/b2e783e1-c824-4d63-b37a-d8d698862f1d
                - id: 4d67459c-af07-40bb-bb12-178dbb88e09f
                  origin: b2e783e1-c824-4d63-b37a-d8d698862f1d
                  destination: efdbb9d1-02c2-4bc3-afb7-6788d8782b1e
                  departure_time: 2024-02-01T12:00:00Z
                  arrival_time: 2024-02-01T18:00:00Z
                  price: 50
                  operator: SNCF
                  bicycles_allowed: true
                  dogs_allowed: true
                  links:
                    self: https://api.example.com/trips/4d67459c-af07-40bb-bb12-178dbb88e09f
                    origin: https://api.example.com/stations/b2e783e1-c824-4d63-b37a-d8d698862f1d
                    destination: https://api.example.com/stations/efdbb9d1-02c2-4bc3-afb7-6788d8782b1e
                links:
                  self: https://api.example.com/trips?origin=efdbb9d1-02c2-4bc3-afb7-6788d8782b1e&destination=b2e783e1-c824-4d63-b37a-d8d698862f1d&date=2024-02-01
                  next: https://api.example.com/trips?origin=efdbb9d1-02c2-4bc3-afb7-6788d8782b1e&destination=b2e783e1-c824-4d63-b37a-d8d698862f1d&date=2024-02-01&page=2
              schema:
                $ref: '#/components/schemas/get_trips_200_response'
            application/xml:
              schema:
                $ref: '#/components/schemas/get_trips_200_response_1'
          description: A list of available train trips
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            RateLimit:
              $ref: '#/components/headers/RateLimit'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Get available train trips
      tags:
      - Trips
  /bookings:
    get:
      description: Returns a list of all trip bookings by the authenticated user.
      operationId: get-bookings
      parameters:
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/limit'
      responses:
        "200":
          content:
            application/json:
              example:
                data:
                - id: efdbb9d1-02c2-4bc3-afb7-6788d8782b1e
                  trip_id: efdbb9d1-02c2-4bc3-afb7-6788d8782b1e
                  passenger_name: John Doe
                  has_bicycle: true
                  has_dog: true
                - id: b2e783e1-c824-4d63-b37a-d8d698862f1d
                  trip_id: b2e783e1-c824-4d63-b37a-d8d698862f1d
                  passenger_name: Jane Smith
                  has_bicycle: false
                  has_dog: false
                links:
                  self: https://api.example.com/bookings
                  next: https://api.example.com/bookings?page=2
              schema:
                $ref: '#/components/schemas/get_bookings_200_response'
            application/xml:
              schema:
                $ref: '#/components/schemas/get_bookings_200_response_1'
          description: A list of bookings
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            RateLimit:
              $ref: '#/components/headers/RateLimit'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: List existing bookings
      tags:
      - Bookings
    post:
      description: A booking is a temporary hold on a trip. It is not confirmed until
        the payment is processed.
      operationId: create-booking
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
          application/xml:
            schema:
              $ref: '#/components/schemas/Booking'
        required: true
      responses:
        "201":
          content:
            application/json:
              example:
                id: efdbb9d1-02c2-4bc3-afb7-6788d8782b1e
                trip_id: efdbb9d1-02c2-4bc3-afb7-6788d8782b1e
                passenger_name: John Doe
                has_bicycle: true
                has_dog: true
                links:
                  self: https://api.example.com/bookings/efdbb9d1-02c2-4bc3-afb7-6788d8782b1e
              schema:
                $ref: '#/components/schemas/create_booking_201_response'
            application/xml:
              schema:
                $ref: '#/components/schemas/create_booking_201_response'
          description: Booking successful
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
      - OAuth2:
        - write
      summary: Create a booking
      tags:
      - Bookings
  /bookings/{bookingId}:
    delete:
      description: "Deletes a booking, cancelling the hold on the trip."
      operationId: delete-booking
      parameters:
      - description: The ID of the booking to retrieve.
        example: 1725ff48-ab45-4bb5-9d02-88745177dedb
        explode: false
        in: path
        name: bookingId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: Booking deleted
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
      - OAuth2:
        - write
      summary: Delete a booking
      tags:
      - Bookings
    get:
      description: Returns the details of a specific booking.
      operationId: get-booking
      parameters:
      - description: The ID of the booking to retrieve.
        example: 1725ff48-ab45-4bb5-9d02-88745177dedb
        explode: false
        in: path
        name: bookingId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                id: efdbb9d1-02c2-4bc3-afb7-6788d8782b1e
                trip_id: efdbb9d1-02c2-4bc3-afb7-6788d8782b1e
                passenger_name: John Doe
                has_bicycle: true
                has_dog: true
                links:
                  self: https://api.example.com/bookings/1725ff48-ab45-4bb5-9d02-88745177dedb
              schema:
                $ref: '#/components/schemas/create_booking_201_response'
            application/xml:
              schema:
                $ref: '#/components/schemas/create_booking_201_response'
          description: The booking details
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            RateLimit:
              $ref: '#/components/headers/RateLimit'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Get a booking
      tags:
      - Bookings
    parameters:
    - description: The ID of the booking to retrieve.
      example: 1725ff48-ab45-4bb5-9d02-88745177dedb
      explode: false
      in: path
      name: bookingId
      required: true
      schema:
        format: uuid
        type: string
      style: simple
  /bookings/{bookingId}/payment:
    parameters:
    - description: The ID of the booking to pay for.
      example: 1725ff48-ab45-4bb5-9d02-88745177dedb
      explode: false
      in: path
      name: bookingId
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    post:
      description: "A payment is an attempt to pay for the booking, which will confirm\
        \ the booking for the user and enable them to get their tickets."
      operationId: create-booking-payment
      parameters:
      - description: The ID of the booking to pay for.
        example: 1725ff48-ab45-4bb5-9d02-88745177dedb
        explode: false
        in: path
        name: bookingId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              Card:
                summary: Card Payment
                value:
                  amount: 49.99
                  currency: gbp
                  source:
                    object: card
                    name: J. Doe
                    number: "4242424242424242"
                    cvc: "123"
                    exp_month: 12
                    exp_year: 2025
                    address_line1: 123 Fake Street
                    address_line2: 4th Floor
                    address_city: London
                    address_country: gb
                    address_post_code: N12 9XX
              Bank:
                summary: Bank Account Payment
                value:
                  amount: 100.5
                  currency: gbp
                  source:
                    object: bank_account
                    name: J. Doe
                    number: "00012345"
                    sort_code: "000123"
                    account_type: individual
                    bank_name: Starling Bank
                    country: gb
            schema:
              $ref: '#/components/schemas/BookingPayment'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                Card:
                  summary: Card Payment
                  value:
                    id: 2e3b4f5a-6b7c-8d9e-0f1a-2b3c4d5e6f7a
                    amount: 49.99
                    currency: gbp
                    source:
                      object: card
                      name: J. Doe
                      number: '************4242'
                      cvc: "123"
                      exp_month: 12
                      exp_year: 2025
                      address_country: gb
                      address_post_code: N12 9XX
                    status: succeeded
                    links:
                      booking: https://api.example.com/bookings/1725ff48-ab45-4bb5-9d02-88745177dedb/payment
                Bank:
                  summary: Bank Account Payment
                  value:
                    id: 2e3b4f5a-6b7c-8d9e-0f1a-2b3c4d5e6f7a
                    amount: 100.5
                    currency: gbp
                    source:
                      object: bank_account
                      name: J. Doe
                      account_type: individual
                      number: '*********2345'
                      sort_code: "000123"
                      bank_name: Starling Bank
                      country: gb
                    status: succeeded
                    links:
                      booking: https://api.example.com/bookings/1725ff48-ab45-4bb5-9d02-88745177dedb
              schema:
                $ref: '#/components/schemas/create_booking_payment_200_response'
          description: Payment successful
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            RateLimit:
              $ref: '#/components/headers/RateLimit'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Pay for a Booking
      tags:
      - Payments
components:
  headers:
    Cache-Control:
      description: "The Cache-Control header communicates directives for caching mechanisms\
        \ in both requests and responses. \nIt is used to specify the caching directives\
        \ in responses to prevent caches from storing sensitive information.\n"
      explode: false
      schema:
        description: "A comma-separated list of directives as defined in [RFC 9111](https://www.rfc-editor.org/rfc/rfc9111.html)."
      style: simple
    RateLimit:
      description: |
        The RateLimit header communicates quota policies. It contains a `limit` to
        convey the expiring limit, `remaining` to convey the remaining quota units,
        and `reset` to convey the time window reset time.
      explode: false
      schema: {}
      style: simple
    Retry-After:
      description: "The Retry-After header indicates how long the user agent should\
        \ wait before making a follow-up request. \nThe value is in seconds and can\
        \ be an integer or a date in the future. \nIf the value is an integer, it\
        \ indicates the number of seconds to wait. \nIf the value is a date, it indicates\
        \ the time at which the user agent should make a follow-up request. \n"
      explode: false
      schema: {}
      style: simple
  parameters:
    page:
      description: The page number to return
      example: 1
      explode: true
      in: query
      name: page
      required: false
      schema:
        default: 1
        minimum: 1
        type: integer
      style: form
    limit:
      description: The number of items to return per page
      example: 10
      explode: true
      in: query
      name: limit
      required: false
      schema:
        default: 10
        maximum: 100
        minimum: 1
        type: integer
      style: form
  responses:
    BadRequest:
      content:
        application/problem+json:
          example:
            type: https://example.com/errors/bad-request
            title: Bad Request
            status: 400
            detail: The request is invalid or missing required parameters.
          schema:
            $ref: '#/components/schemas/Problem'
        application/problem+xml:
          example:
            type: https://example.com/errors/bad-request
            title: Bad Request
            status: 400
            detail: The request is invalid or missing required parameters.
          schema:
            $ref: '#/components/schemas/Problem'
      description: Bad Request
      headers:
        RateLimit:
          $ref: '#/components/headers/RateLimit'
    Conflict:
      content:
        application/problem+json:
          example:
            type: https://example.com/errors/conflict
            title: Conflict
            status: 409
            detail: There is a conflict with an existing resource.
          schema:
            $ref: '#/components/schemas/Problem'
        application/problem+xml:
          example:
            type: https://example.com/errors/conflict
            title: Conflict
            status: 409
            detail: There is a conflict with an existing resource.
          schema:
            $ref: '#/components/schemas/Problem'
      description: Conflict
      headers:
        RateLimit:
          $ref: '#/components/headers/RateLimit'
    Forbidden:
      content:
        application/problem+json:
          example:
            type: https://example.com/errors/forbidden
            title: Forbidden
            status: 403
            detail: Access is forbidden with the provided credentials.
          schema:
            $ref: '#/components/schemas/Problem'
        application/problem+xml:
          example:
            type: https://example.com/errors/forbidden
            title: Forbidden
            status: 403
            detail: Access is forbidden with the provided credentials.
          schema:
            $ref: '#/components/schemas/Problem'
      description: Forbidden
      headers:
        RateLimit:
          $ref: '#/components/headers/RateLimit'
    InternalServerError:
      content:
        application/problem+json:
          example:
            type: https://example.com/errors/internal-server-error
            title: Internal Server Error
            status: 500
            detail: An unexpected error occurred.
          schema:
            $ref: '#/components/schemas/Problem'
        application/problem+xml:
          example:
            type: https://example.com/errors/internal-server-error
            title: Internal Server Error
            status: 500
            detail: An unexpected error occurred.
          schema:
            $ref: '#/components/schemas/Problem'
      description: Internal Server Error
      headers:
        RateLimit:
          $ref: '#/components/headers/RateLimit'
    NotFound:
      content:
        application/problem+json:
          example:
            type: https://example.com/errors/not-found
            title: Not Found
            status: 404
            detail: The requested resource was not found.
          schema:
            $ref: '#/components/schemas/Problem'
        application/problem+xml:
          example:
            type: https://example.com/errors/not-found
            title: Not Found
            status: 404
            detail: The requested resource was not found.
          schema:
            $ref: '#/components/schemas/Problem'
      description: Not Found
      headers:
        RateLimit:
          $ref: '#/components/headers/RateLimit'
    TooManyRequests:
      content:
        application/problem+json:
          example:
            type: https://example.com/errors/too-many-requests
            title: Too Many Requests
            status: 429
            detail: You have exceeded the rate limit.
          schema:
            $ref: '#/components/schemas/Problem'
        application/problem+xml:
          example:
            type: https://example.com/errors/too-many-requests
            title: Too Many Requests
            status: 429
            detail: You have exceeded the rate limit.
          schema:
            $ref: '#/components/schemas/Problem'
      description: Too Many Requests
      headers:
        RateLimit:
          $ref: '#/components/headers/RateLimit'
        Retry-After:
          $ref: '#/components/headers/Retry-After'
    Unauthorized:
      content:
        application/problem+json:
          example:
            type: https://example.com/errors/unauthorized
            title: Unauthorized
            status: 401
            detail: You do not have the necessary permissions.
          schema:
            $ref: '#/components/schemas/Problem'
        application/problem+xml:
          example:
            type: https://example.com/errors/unauthorized
            title: Unauthorized
            status: 401
            detail: You do not have the necessary permissions.
          schema:
            $ref: '#/components/schemas/Problem'
      description: Unauthorized
      headers:
        RateLimit:
          $ref: '#/components/headers/RateLimit'
  schemas:
    Station:
      example:
        country_code: country_code
        address: address
        timezone: timezone
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          description: Unique identifier for the station.
          format: uuid
          type: string
        name:
          description: The name of the station
          type: string
        address:
          description: The address of the station.
          type: string
        country_code:
          description: The country code of the station.
          format: iso-country-code
          type: string
        timezone:
          description: "The timezone of the station in the [IANA Time Zone Database\
            \ format](https://www.iana.org/time-zones)."
          type: string
      required:
      - address
      - country_code
      - id
      - name
      xml:
        name: station
    Links-Self:
      example:
        self: https://openapi-generator.tech
      properties:
        self:
          format: uri
          type: string
    Links-Destination:
      description: The link to the destination station resource.
      properties:
        self:
          format: uri
          type: string
    Links-Origin:
      description: The link to the origin station resource.
      properties:
        self:
          format: uri
          type: string
    Links-Pagination:
      properties:
        next:
          format: uri
          type: string
        prev:
          format: uri
          type: string
    Problem:
      properties:
        type:
          description: A URI reference that identifies the problem type
          type: string
        title:
          description: "A short, human-readable summary of the problem type"
          type: string
        detail:
          description: A human-readable explanation specific to this occurrence of
            the problem
          type: string
        instance:
          description: A URI reference that identifies the specific occurrence of
            the problem
          type: string
        status:
          description: The HTTP status code
          type: integer
      xml:
        name: problem
        namespace: urn:ietf:rfc:7807
    Trip:
      properties:
        id:
          description: Unique identifier for the trip
          format: uuid
          type: string
        origin:
          description: The starting station of the trip
          type: string
        destination:
          description: The destination station of the trip
          type: string
        departure_time:
          description: The date and time when the trip departs
          format: date-time
          type: string
        arrival_time:
          description: The date and time when the trip arrives
          format: date-time
          type: string
        operator:
          description: The name of the operator of the trip
          type: string
        price:
          description: The cost of the trip
          type: number
        bicycles_allowed:
          description: Indicates whether bicycles are allowed on the trip
          type: boolean
        dogs_allowed:
          description: Indicates whether dogs are allowed on the trip
          type: boolean
      xml:
        name: trip
    Booking:
      example:
        trip_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        has_dog: true
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        passenger_name: passenger_name
        has_bicycle: true
      properties:
        id:
          description: Unique identifier for the booking
          format: uuid
          readOnly: true
          type: string
        trip_id:
          description: Identifier of the booked trip
          format: uuid
          type: string
        passenger_name:
          description: Name of the passenger
          type: string
        has_bicycle:
          description: Indicates whether the passenger has a bicycle.
          type: boolean
        has_dog:
          description: Indicates whether the passenger has a dog.
          type: boolean
      xml:
        name: booking
    Wrapper-Collection:
      description: This is a generic request/response wrapper which contains both
        data and links which serve as hypermedia controls (HATEOAS).
      properties:
        data:
          description: The wrapper for a collection is an array of objects.
          items:
            type: object
          type: array
        links:
          description: A set of hypermedia links which serve as controls for the client.
          readOnly: true
          type: object
      xml:
        name: data
    BookingPayment:
      example:
        amount: 0.8008281904610115
        currency: bam
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        source:
          number: number
          cvc: "123"
          address_line2: address_line2
          address_line1: address_line1
          address_country: address_country
          name: name
          exp_month: 6
          address_post_code: address_post_code
          exp_year: 1
          object: object
          address_city: address_city
        status: pending
      properties:
        id:
          description: "Unique identifier for the payment. This will be a unique identifier\
            \ for the payment, and is used to reference the payment in other objects."
          format: uuid
          readOnly: true
          type: string
        amount:
          description: Amount intended to be collected by this payment. A positive
            decimal figure describing the amount to be collected.
          type: number
        currency:
          description: "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html),\
            \ in lowercase."
          enum:
          - bam
          - bgn
          - chf
          - eur
          - gbp
          - nok
          - sek
          - try
          type: string
        source:
          $ref: '#/components/schemas/BookingPayment_source'
        status:
          description: "The status of the payment, one of `pending`, `succeeded`,\
            \ or `failed`."
          enum:
          - pending
          - succeeded
          - failed
          readOnly: true
          type: string
    Links-Booking:
      example:
        booking: https://openapi-generator.tech
      properties:
        booking:
          format: uri
          type: string
    get_stations_200_response_allOf_links:
      allOf:
      - $ref: '#/components/schemas/Links-Self'
      - $ref: '#/components/schemas/Links-Pagination'
      example:
        next: https://openapi-generator.tech
        prev: https://openapi-generator.tech
        self: https://openapi-generator.tech
    get_stations_200_response:
      allOf:
      - $ref: '#/components/schemas/Wrapper-Collection'
      - properties:
          data:
            items:
              $ref: '#/components/schemas/Station'
            type: array
      - properties:
          links:
            $ref: '#/components/schemas/get_stations_200_response_allOf_links'
      example:
        data:
        - country_code: country_code
          address: address
          timezone: timezone
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - country_code: country_code
          address: address
          timezone: timezone
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        links:
          next: https://openapi-generator.tech
          prev: https://openapi-generator.tech
          self: https://openapi-generator.tech
    get_stations_200_response_1:
      allOf:
      - $ref: '#/components/schemas/Wrapper-Collection'
      - properties:
          data:
            items:
              $ref: '#/components/schemas/Station'
            type: array
            xml:
              name: stations
              wrapped: true
      - properties:
          links:
            $ref: '#/components/schemas/get_stations_200_response_allOf_links'
    get_trips_200_response_allOf_data_inner:
      allOf:
      - $ref: '#/components/schemas/Trip'
      - $ref: '#/components/schemas/Links-Origin'
      - $ref: '#/components/schemas/Links-Destination'
      example:
        bicycles_allowed: true
        arrival_time: 2000-01-23T04:56:07.000+00:00
        price: 0.8008281904610115
        dogs_allowed: true
        origin: origin
        destination: destination
        self: https://openapi-generator.tech
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        departure_time: 2000-01-23T04:56:07.000+00:00
        operator: operator
    get_trips_200_response:
      allOf:
      - $ref: '#/components/schemas/Wrapper-Collection'
      - properties:
          data:
            items:
              $ref: '#/components/schemas/get_trips_200_response_allOf_data_inner'
            type: array
      - properties:
          links:
            $ref: '#/components/schemas/get_stations_200_response_allOf_links'
      example:
        data:
        - bicycles_allowed: true
          arrival_time: 2000-01-23T04:56:07.000+00:00
          price: 0.8008281904610115
          dogs_allowed: true
          origin: origin
          destination: destination
          self: https://openapi-generator.tech
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          departure_time: 2000-01-23T04:56:07.000+00:00
          operator: operator
        - bicycles_allowed: true
          arrival_time: 2000-01-23T04:56:07.000+00:00
          price: 0.8008281904610115
          dogs_allowed: true
          origin: origin
          destination: destination
          self: https://openapi-generator.tech
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          departure_time: 2000-01-23T04:56:07.000+00:00
          operator: operator
        links:
          next: https://openapi-generator.tech
          prev: https://openapi-generator.tech
          self: https://openapi-generator.tech
    get_trips_200_response_1:
      allOf:
      - $ref: '#/components/schemas/Wrapper-Collection'
      - properties:
          data:
            items:
              $ref: '#/components/schemas/Trip'
            type: array
            xml:
              name: trips
              wrapped: true
      - properties:
          links:
            $ref: '#/components/schemas/get_stations_200_response_allOf_links'
    get_bookings_200_response:
      allOf:
      - $ref: '#/components/schemas/Wrapper-Collection'
      - properties:
          data:
            items:
              $ref: '#/components/schemas/Booking'
            type: array
      - properties:
          links:
            $ref: '#/components/schemas/get_stations_200_response_allOf_links'
      example:
        data:
        - trip_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          has_dog: true
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          passenger_name: passenger_name
          has_bicycle: true
        - trip_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          has_dog: true
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          passenger_name: passenger_name
          has_bicycle: true
        links:
          next: https://openapi-generator.tech
          prev: https://openapi-generator.tech
          self: https://openapi-generator.tech
    get_bookings_200_response_1:
      allOf:
      - $ref: '#/components/schemas/Wrapper-Collection'
      - properties:
          data:
            items:
              $ref: '#/components/schemas/Booking'
            type: array
            xml:
              name: bookings
              wrapped: true
      - properties:
          links:
            $ref: '#/components/schemas/get_stations_200_response_allOf_links'
    create_booking_201_response:
      allOf:
      - $ref: '#/components/schemas/Booking'
      - properties:
          links:
            $ref: '#/components/schemas/Links-Self'
      example:
        trip_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        has_dog: true
        links:
          self: https://openapi-generator.tech
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        passenger_name: passenger_name
        has_bicycle: true
    create_booking_payment_200_response:
      allOf:
      - $ref: '#/components/schemas/BookingPayment'
      - properties:
          links:
            $ref: '#/components/schemas/Links-Booking'
      example:
        amount: 0.8008281904610115
        currency: bam
        links:
          booking: https://openapi-generator.tech
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        source:
          number: number
          cvc: "123"
          address_line2: address_line2
          address_line1: address_line1
          address_country: address_country
          name: name
          exp_month: 6
          address_post_code: address_post_code
          exp_year: 1
          object: object
          address_city: address_city
        status: pending
    Card:
      description: A card (debit or credit) to take payment from.
      example:
        number: number
        cvc: "123"
        address_line2: address_line2
        address_line1: address_line1
        address_country: address_country
        name: name
        exp_month: 6
        address_post_code: address_post_code
        exp_year: 1
        object: object
        address_city: address_city
      properties:
        object:
          type: string
        name:
          description: Cardholder's full name as it appears on the card.
          type: string
        number:
          description: "The card number, as a string without any separators. On read\
            \ all but the last four digits will be masked for security."
          type: string
        cvc:
          description: "Card security code, 3 or 4 digits usually found on the back\
            \ of the card."
          example: "123"
          maxLength: 4
          minLength: 3
          type: string
          writeOnly: true
        exp_month:
          description: Two-digit number representing the card's expiration month.
          format: int64
          type: integer
        exp_year:
          description: Four-digit number representing the card's expiration year.
          format: int64
          type: integer
        address_line1:
          type: string
          writeOnly: true
        address_line2:
          type: string
          writeOnly: true
        address_city:
          type: string
        address_country:
          type: string
        address_post_code:
          type: string
      required:
      - address_country
      - cvc
      - exp_month
      - exp_year
      - name
      - number
      title: Card
    Bank_Account:
      description: A bank account to take payment from. Must be able to make payments
        in the currency specified in the payment.
      properties:
        object:
          type: string
        name:
          type: string
        number:
          description: "The account number for the bank account, in string form. Must\
            \ be a current account."
          type: string
        sort_code:
          description: "The sort code for the bank account, in string form. Must be\
            \ a six-digit number."
          type: string
        account_type:
          description: The type of entity that holds the account. This can be either
            `individual` or `company`.
          enum:
          - individual
          - company
          type: string
        bank_name:
          description: The name of the bank associated with the routing number.
          type: string
        country:
          description: Two-letter country code (ISO 3166-1 alpha-2).
          type: string
      required:
      - account_type
      - bank_name
      - country
      - name
      - number
      title: Bank Account
    BookingPayment_source:
      description: The payment source to take the payment from. This can be a card
        or a bank account. Some of these properties will be hidden on read to protect
        PII leaking.
      oneOf:
      - $ref: '#/components/schemas/Card'
      - $ref: '#/components/schemas/Bank_Account'
  securitySchemes:
    OAuth2:
      description: OAuth 2.0 authorization code following RFC8725 best practices.
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize
          scopes:
            read: Read access
            write: Write access
          tokenUrl: https://example.com/oauth/token
      type: oauth2
x-speakeasy-retries:
  strategy: backoff
  backoff:
    initialInterval: 500
    maxInterval: 60000
    maxElapsedTime: 3600000
    exponent: 1.5
  statusCodes:
  - 5XX
  retryConnectionErrors: true
x-topics:
- title: Getting started
  content:
    $ref: ./docs/getting-started.md
