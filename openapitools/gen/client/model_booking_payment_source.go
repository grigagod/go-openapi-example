/*
Train Travel API

API for finding and booking train trips across Europe.  ## Run in Postman  Experiment with this API in Postman, using our Postman Collection.  [![Run In Postman](https://run.pstmn.io/button.svg =128pxx32px)](https://app.getpostman.com/run-collection/9265903-7a75a0d0-b108-4436-ba54-c6139698dc08?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D9265903-7a75a0d0-b108-4436-ba54-c6139698dc08%26entityType%3Dcollection%26workspaceId%3Df507f69d-9564-419c-89a2-cb8e4c8c7b8f)

API version: 1.2.0
Contact: support@example.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oas

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// BookingPaymentSource - The payment source to take the payment from. This can be a card or a bank account. Some of these properties will be hidden on read to protect PII leaking.
type BookingPaymentSource struct {
	BankAccount *BankAccount
	Card        *Card
}

// BankAccountAsBookingPaymentSource is a convenience function that returns BankAccount wrapped in BookingPaymentSource
func BankAccountAsBookingPaymentSource(v *BankAccount) BookingPaymentSource {
	return BookingPaymentSource{
		BankAccount: v,
	}
}

// CardAsBookingPaymentSource is a convenience function that returns Card wrapped in BookingPaymentSource
func CardAsBookingPaymentSource(v *Card) BookingPaymentSource {
	return BookingPaymentSource{
		Card: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *BookingPaymentSource) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BankAccount
	err = newStrictDecoder(data).Decode(&dst.BankAccount)
	if err == nil {
		jsonBankAccount, _ := json.Marshal(dst.BankAccount)
		if string(jsonBankAccount) == "{}" { // empty struct
			dst.BankAccount = nil
		} else {
			if err = validator.Validate(dst.BankAccount); err != nil {
				dst.BankAccount = nil
			} else {
				match++
			}
		}
	} else {
		dst.BankAccount = nil
	}

	// try to unmarshal data into Card
	err = newStrictDecoder(data).Decode(&dst.Card)
	if err == nil {
		jsonCard, _ := json.Marshal(dst.Card)
		if string(jsonCard) == "{}" { // empty struct
			dst.Card = nil
		} else {
			if err = validator.Validate(dst.Card); err != nil {
				dst.Card = nil
			} else {
				match++
			}
		}
	} else {
		dst.Card = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BankAccount = nil
		dst.Card = nil

		return fmt.Errorf("data matches more than one schema in oneOf(BookingPaymentSource)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(BookingPaymentSource)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BookingPaymentSource) MarshalJSON() ([]byte, error) {
	if src.BankAccount != nil {
		return json.Marshal(&src.BankAccount)
	}

	if src.Card != nil {
		return json.Marshal(&src.Card)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *BookingPaymentSource) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.BankAccount != nil {
		return obj.BankAccount
	}

	if obj.Card != nil {
		return obj.Card
	}

	// all schemas are nil
	return nil
}

type NullableBookingPaymentSource struct {
	value *BookingPaymentSource
	isSet bool
}

func (v NullableBookingPaymentSource) Get() *BookingPaymentSource {
	return v.value
}

func (v *NullableBookingPaymentSource) Set(val *BookingPaymentSource) {
	v.value = val
	v.isSet = true
}

func (v NullableBookingPaymentSource) IsSet() bool {
	return v.isSet
}

func (v *NullableBookingPaymentSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBookingPaymentSource(val *BookingPaymentSource) *NullableBookingPaymentSource {
	return &NullableBookingPaymentSource{value: val, isSet: true}
}

func (v NullableBookingPaymentSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBookingPaymentSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
