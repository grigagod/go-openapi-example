/*
Train Travel API

API for finding and booking train trips across Europe.  ## Run in Postman  Experiment with this API in Postman, using our Postman Collection.  [![Run In Postman](https://run.pstmn.io/button.svg =128pxx32px)](https://app.getpostman.com/run-collection/9265903-7a75a0d0-b108-4436-ba54-c6139698dc08?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D9265903-7a75a0d0-b108-4436-ba54-c6139698dc08%26entityType%3Dcollection%26workspaceId%3Df507f69d-9564-419c-89a2-cb8e4c8c7b8f)

API version: 1.2.0
Contact: support@example.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oas

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"time"
)

// TripsAPIService TripsAPI service
type TripsAPIService service

type ApiGetTripsRequest struct {
	ctx         context.Context
	ApiService  *TripsAPIService
	origin      *string
	destination *string
	date        *time.Time
	page        *int32
	limit       *int32
	bicycles    *bool
	dogs        *bool
}

// The ID of the origin station
func (r ApiGetTripsRequest) Origin(origin string) ApiGetTripsRequest {
	r.origin = &origin
	return r
}

// The ID of the destination station
func (r ApiGetTripsRequest) Destination(destination string) ApiGetTripsRequest {
	r.destination = &destination
	return r
}

// The date and time of the trip in ISO 8601 format in origin station&#39;s timezone.
func (r ApiGetTripsRequest) Date(date time.Time) ApiGetTripsRequest {
	r.date = &date
	return r
}

// The page number to return
func (r ApiGetTripsRequest) Page(page int32) ApiGetTripsRequest {
	r.page = &page
	return r
}

// The number of items to return per page
func (r ApiGetTripsRequest) Limit(limit int32) ApiGetTripsRequest {
	r.limit = &limit
	return r
}

// Only return trips where bicycles are known to be allowed
func (r ApiGetTripsRequest) Bicycles(bicycles bool) ApiGetTripsRequest {
	r.bicycles = &bicycles
	return r
}

// Only return trips where dogs are known to be allowed
func (r ApiGetTripsRequest) Dogs(dogs bool) ApiGetTripsRequest {
	r.dogs = &dogs
	return r
}

func (r ApiGetTripsRequest) Execute() (*GetTrips200Response, *http.Response, error) {
	return r.ApiService.GetTripsExecute(r)
}

/*
GetTrips Get available train trips

Returns a list of available train trips between the specified origin and destination stations on the given date, and allows for filtering by bicycle and dog allowances.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetTripsRequest
*/
func (a *TripsAPIService) GetTrips(ctx context.Context) ApiGetTripsRequest {
	return ApiGetTripsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return GetTrips200Response
func (a *TripsAPIService) GetTripsExecute(r ApiGetTripsRequest) (*GetTrips200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GetTrips200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TripsAPIService.GetTrips")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/trips"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.origin == nil {
		return localVarReturnValue, nil, reportError("origin is required and must be specified")
	}
	if r.destination == nil {
		return localVarReturnValue, nil, reportError("destination is required and must be specified")
	}
	if r.date == nil {
		return localVarReturnValue, nil, reportError("date is required and must be specified")
	}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 10
		r.limit = &defaultValue
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "origin", r.origin, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "destination", r.destination, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "date", r.date, "form", "")
	if r.bicycles != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bicycles", r.bicycles, "form", "")
	} else {
		var defaultValue bool = false
		r.bicycles = &defaultValue
	}
	if r.dogs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dogs", r.dogs, "form", "")
	} else {
		var defaultValue bool = false
		r.dogs = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml", "application/problem+json", "application/problem+xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Problem
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Problem
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Problem
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Problem
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Problem
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
