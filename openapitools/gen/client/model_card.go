/*
Train Travel API

API for finding and booking train trips across Europe.  ## Run in Postman  Experiment with this API in Postman, using our Postman Collection.  [![Run In Postman](https://run.pstmn.io/button.svg =128pxx32px)](https://app.getpostman.com/run-collection/9265903-7a75a0d0-b108-4436-ba54-c6139698dc08?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D9265903-7a75a0d0-b108-4436-ba54-c6139698dc08%26entityType%3Dcollection%26workspaceId%3Df507f69d-9564-419c-89a2-cb8e4c8c7b8f)

API version: 1.2.0
Contact: support@example.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oas

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Card type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Card{}

// Card A card (debit or credit) to take payment from.
type Card struct {
	Object *string `json:"object,omitempty"`
	// Cardholder's full name as it appears on the card.
	Name string `json:"name"`
	// The card number, as a string without any separators. On read all but the last four digits will be masked for security.
	Number string `json:"number"`
	// Card security code, 3 or 4 digits usually found on the back of the card.
	Cvc string `json:"cvc"`
	// Two-digit number representing the card's expiration month.
	ExpMonth int64 `json:"exp_month"`
	// Four-digit number representing the card's expiration year.
	ExpYear         int64   `json:"exp_year"`
	AddressLine1    *string `json:"address_line1,omitempty"`
	AddressLine2    *string `json:"address_line2,omitempty"`
	AddressCity     *string `json:"address_city,omitempty"`
	AddressCountry  string  `json:"address_country"`
	AddressPostCode *string `json:"address_post_code,omitempty"`
}

type _Card Card

// NewCard instantiates a new Card object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCard(name string, number string, cvc string, expMonth int64, expYear int64, addressCountry string) *Card {
	this := Card{}
	this.Name = name
	this.Number = number
	this.Cvc = cvc
	this.ExpMonth = expMonth
	this.ExpYear = expYear
	this.AddressCountry = addressCountry
	return &this
}

// NewCardWithDefaults instantiates a new Card object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardWithDefaults() *Card {
	this := Card{}
	return &this
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *Card) GetObject() string {
	if o == nil || IsNil(o.Object) {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Card) GetObjectOk() (*string, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *Card) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *Card) SetObject(v string) {
	o.Object = &v
}

// GetName returns the Name field value
func (o *Card) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Card) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Card) SetName(v string) {
	o.Name = v
}

// GetNumber returns the Number field value
func (o *Card) GetNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *Card) GetNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *Card) SetNumber(v string) {
	o.Number = v
}

// GetCvc returns the Cvc field value
func (o *Card) GetCvc() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cvc
}

// GetCvcOk returns a tuple with the Cvc field value
// and a boolean to check if the value has been set.
func (o *Card) GetCvcOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cvc, true
}

// SetCvc sets field value
func (o *Card) SetCvc(v string) {
	o.Cvc = v
}

// GetExpMonth returns the ExpMonth field value
func (o *Card) GetExpMonth() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ExpMonth
}

// GetExpMonthOk returns a tuple with the ExpMonth field value
// and a boolean to check if the value has been set.
func (o *Card) GetExpMonthOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpMonth, true
}

// SetExpMonth sets field value
func (o *Card) SetExpMonth(v int64) {
	o.ExpMonth = v
}

// GetExpYear returns the ExpYear field value
func (o *Card) GetExpYear() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ExpYear
}

// GetExpYearOk returns a tuple with the ExpYear field value
// and a boolean to check if the value has been set.
func (o *Card) GetExpYearOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpYear, true
}

// SetExpYear sets field value
func (o *Card) SetExpYear(v int64) {
	o.ExpYear = v
}

// GetAddressLine1 returns the AddressLine1 field value if set, zero value otherwise.
func (o *Card) GetAddressLine1() string {
	if o == nil || IsNil(o.AddressLine1) {
		var ret string
		return ret
	}
	return *o.AddressLine1
}

// GetAddressLine1Ok returns a tuple with the AddressLine1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Card) GetAddressLine1Ok() (*string, bool) {
	if o == nil || IsNil(o.AddressLine1) {
		return nil, false
	}
	return o.AddressLine1, true
}

// HasAddressLine1 returns a boolean if a field has been set.
func (o *Card) HasAddressLine1() bool {
	if o != nil && !IsNil(o.AddressLine1) {
		return true
	}

	return false
}

// SetAddressLine1 gets a reference to the given string and assigns it to the AddressLine1 field.
func (o *Card) SetAddressLine1(v string) {
	o.AddressLine1 = &v
}

// GetAddressLine2 returns the AddressLine2 field value if set, zero value otherwise.
func (o *Card) GetAddressLine2() string {
	if o == nil || IsNil(o.AddressLine2) {
		var ret string
		return ret
	}
	return *o.AddressLine2
}

// GetAddressLine2Ok returns a tuple with the AddressLine2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Card) GetAddressLine2Ok() (*string, bool) {
	if o == nil || IsNil(o.AddressLine2) {
		return nil, false
	}
	return o.AddressLine2, true
}

// HasAddressLine2 returns a boolean if a field has been set.
func (o *Card) HasAddressLine2() bool {
	if o != nil && !IsNil(o.AddressLine2) {
		return true
	}

	return false
}

// SetAddressLine2 gets a reference to the given string and assigns it to the AddressLine2 field.
func (o *Card) SetAddressLine2(v string) {
	o.AddressLine2 = &v
}

// GetAddressCity returns the AddressCity field value if set, zero value otherwise.
func (o *Card) GetAddressCity() string {
	if o == nil || IsNil(o.AddressCity) {
		var ret string
		return ret
	}
	return *o.AddressCity
}

// GetAddressCityOk returns a tuple with the AddressCity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Card) GetAddressCityOk() (*string, bool) {
	if o == nil || IsNil(o.AddressCity) {
		return nil, false
	}
	return o.AddressCity, true
}

// HasAddressCity returns a boolean if a field has been set.
func (o *Card) HasAddressCity() bool {
	if o != nil && !IsNil(o.AddressCity) {
		return true
	}

	return false
}

// SetAddressCity gets a reference to the given string and assigns it to the AddressCity field.
func (o *Card) SetAddressCity(v string) {
	o.AddressCity = &v
}

// GetAddressCountry returns the AddressCountry field value
func (o *Card) GetAddressCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AddressCountry
}

// GetAddressCountryOk returns a tuple with the AddressCountry field value
// and a boolean to check if the value has been set.
func (o *Card) GetAddressCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AddressCountry, true
}

// SetAddressCountry sets field value
func (o *Card) SetAddressCountry(v string) {
	o.AddressCountry = v
}

// GetAddressPostCode returns the AddressPostCode field value if set, zero value otherwise.
func (o *Card) GetAddressPostCode() string {
	if o == nil || IsNil(o.AddressPostCode) {
		var ret string
		return ret
	}
	return *o.AddressPostCode
}

// GetAddressPostCodeOk returns a tuple with the AddressPostCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Card) GetAddressPostCodeOk() (*string, bool) {
	if o == nil || IsNil(o.AddressPostCode) {
		return nil, false
	}
	return o.AddressPostCode, true
}

// HasAddressPostCode returns a boolean if a field has been set.
func (o *Card) HasAddressPostCode() bool {
	if o != nil && !IsNil(o.AddressPostCode) {
		return true
	}

	return false
}

// SetAddressPostCode gets a reference to the given string and assigns it to the AddressPostCode field.
func (o *Card) SetAddressPostCode(v string) {
	o.AddressPostCode = &v
}

func (o Card) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Card) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	toSerialize["name"] = o.Name
	toSerialize["number"] = o.Number
	toSerialize["cvc"] = o.Cvc
	toSerialize["exp_month"] = o.ExpMonth
	toSerialize["exp_year"] = o.ExpYear
	if !IsNil(o.AddressLine1) {
		toSerialize["address_line1"] = o.AddressLine1
	}
	if !IsNil(o.AddressLine2) {
		toSerialize["address_line2"] = o.AddressLine2
	}
	if !IsNil(o.AddressCity) {
		toSerialize["address_city"] = o.AddressCity
	}
	toSerialize["address_country"] = o.AddressCountry
	if !IsNil(o.AddressPostCode) {
		toSerialize["address_post_code"] = o.AddressPostCode
	}
	return toSerialize, nil
}

func (o *Card) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"number",
		"cvc",
		"exp_month",
		"exp_year",
		"address_country",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCard := _Card{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCard)

	if err != nil {
		return err
	}

	*o = Card(varCard)

	return err
}

type NullableCard struct {
	value *Card
	isSet bool
}

func (v NullableCard) Get() *Card {
	return v.value
}

func (v *NullableCard) Set(val *Card) {
	v.value = val
	v.isSet = true
}

func (v NullableCard) IsSet() bool {
	return v.isSet
}

func (v *NullableCard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCard(val *Card) *NullableCard {
	return &NullableCard{value: val, isSet: true}
}

func (v NullableCard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
