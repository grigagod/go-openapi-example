/*
Train Travel API

API for finding and booking train trips across Europe.  ## Run in Postman  Experiment with this API in Postman, using our Postman Collection.  [![Run In Postman](https://run.pstmn.io/button.svg =128pxx32px)](https://app.getpostman.com/run-collection/9265903-7a75a0d0-b108-4436-ba54-c6139698dc08?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D9265903-7a75a0d0-b108-4436-ba54-c6139698dc08%26entityType%3Dcollection%26workspaceId%3Df507f69d-9564-419c-89a2-cb8e4c8c7b8f)

API version: 1.2.0
Contact: support@example.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oas

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Station type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Station{}

// Station struct for Station
type Station struct {
	// Unique identifier for the station.
	Id string `json:"id"`
	// The name of the station
	Name string `json:"name"`
	// The address of the station.
	Address string `json:"address"`
	// The country code of the station.
	CountryCode string `json:"country_code"`
	// The timezone of the station in the [IANA Time Zone Database format](https://www.iana.org/time-zones).
	Timezone *string `json:"timezone,omitempty"`
}

type _Station Station

// NewStation instantiates a new Station object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStation(id string, name string, address string, countryCode string) *Station {
	this := Station{}
	this.Id = id
	this.Name = name
	this.Address = address
	this.CountryCode = countryCode
	return &this
}

// NewStationWithDefaults instantiates a new Station object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStationWithDefaults() *Station {
	this := Station{}
	return &this
}

// GetId returns the Id field value
func (o *Station) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Station) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Station) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Station) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Station) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Station) SetName(v string) {
	o.Name = v
}

// GetAddress returns the Address field value
func (o *Station) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *Station) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *Station) SetAddress(v string) {
	o.Address = v
}

// GetCountryCode returns the CountryCode field value
func (o *Station) GetCountryCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value
// and a boolean to check if the value has been set.
func (o *Station) GetCountryCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CountryCode, true
}

// SetCountryCode sets field value
func (o *Station) SetCountryCode(v string) {
	o.CountryCode = v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *Station) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Station) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *Station) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *Station) SetTimezone(v string) {
	o.Timezone = &v
}

func (o Station) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Station) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["address"] = o.Address
	toSerialize["country_code"] = o.CountryCode
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	return toSerialize, nil
}

func (o *Station) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"address",
		"country_code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStation := _Station{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStation)

	if err != nil {
		return err
	}

	*o = Station(varStation)

	return err
}

type NullableStation struct {
	value *Station
	isSet bool
}

func (v NullableStation) Get() *Station {
	return v.value
}

func (v *NullableStation) Set(val *Station) {
	v.value = val
	v.isSet = true
}

func (v NullableStation) IsSet() bool {
	return v.isSet
}

func (v *NullableStation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStation(val *Station) *NullableStation {
	return &NullableStation{value: val, isSet: true}
}

func (v NullableStation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
