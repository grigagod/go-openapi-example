// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Train Travel API
 *
 * API for finding and booking train trips across Europe.  ## Run in Postman  Experiment with this API in Postman, using our Postman Collection.  [![Run In Postman](https://run.pstmn.io/button.svg =128pxx32px)](https://app.getpostman.com/run-collection/9265903-7a75a0d0-b108-4436-ba54-c6139698dc08?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D9265903-7a75a0d0-b108-4436-ba54-c6139698dc08%26entityType%3Dcollection%26workspaceId%3Df507f69d-9564-419c-89a2-cb8e4c8c7b8f)
 *
 * API version: 1.2.0
 * Contact: support@example.com
 */

package oas

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// PaymentsAPIController binds http requests to an api service and writes the service results to the http response
type PaymentsAPIController struct {
	service      PaymentsAPIServicer
	errorHandler ErrorHandler
}

// PaymentsAPIOption for how the controller is set up.
type PaymentsAPIOption func(*PaymentsAPIController)

// WithPaymentsAPIErrorHandler inject ErrorHandler into controller
func WithPaymentsAPIErrorHandler(h ErrorHandler) PaymentsAPIOption {
	return func(c *PaymentsAPIController) {
		c.errorHandler = h
	}
}

// NewPaymentsAPIController creates a default api controller
func NewPaymentsAPIController(s PaymentsAPIServicer, opts ...PaymentsAPIOption) *PaymentsAPIController {
	controller := &PaymentsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PaymentsAPIController
func (c *PaymentsAPIController) Routes() Routes {
	return Routes{
		"CreateBookingPayment": Route{
			strings.ToUpper("Post"),
			"/rest/Train+Travel+API/1.0.0/bookings/{bookingId}/payment",
			c.CreateBookingPayment,
		},
	}
}

// CreateBookingPayment - Pay for a Booking
func (c *PaymentsAPIController) CreateBookingPayment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	bookingIdParam := params["bookingId"]
	if bookingIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"bookingId"}, nil)
		return
	}
	bookingPaymentParam := BookingPayment{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bookingPaymentParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBookingPaymentRequired(bookingPaymentParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBookingPaymentConstraints(bookingPaymentParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateBookingPayment(r.Context(), bookingIdParam, bookingPaymentParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
